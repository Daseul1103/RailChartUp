<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.wizbrain.apRailroad.statistic.mapper.StatisticMapper">
<!-- 
수정일           수정자         수정내용 
========= ======= ================================================= 
2020.07.23 정다빈     최초 생성 
-->


	<!-- 전/금일 주의 혼잡 -->
	<resultMap type="mainStVo" id="mainYesToday">
		<result property="carNum"		column=	"CAR_NUM"	/>
		<result property="c1Res"		column=	"C1_RES"	/>
		<result property="c2Res"		column=	"C2_RES"	/>
		<result property="c3Res"		column=	"C3_RES"	/>
		<result property="c4Res"		column=	"C4_RES"	/>
		<result property="c5Res"		column=	"C5_RES"	/>
		<result property="c6Res"		column=	"C6_RES"	/>
		<result property="c7Res"		column=	"C7_RES"	/>
		<result property="c8Res"	    column=	"C8_RES"	/>
		<result property="d1Res"		column=	"D1_RES"	/>
		<result property="d2Res"		column=	"D2_RES"	/>
		<result property="d3Res"		column=	"D3_RES"	/>
		<result property="d4Res"		column=	"D4_RES"	/>
		<result property="d5Res"		column=	"D5_RES"	/>
		<result property="d6Res"		column=	"D6_RES"	/>
		<result property="d7Res"		column=	"D7_RES"	/>
		<result property="d8Res"	    column=	"D8_RES"	/>
	</resultMap>
	<select id="mainYesToday" parameterType="java.lang.String" resultMap="mainYesToday">
		SELECT 
			E.TRAIN_NUM AS CAR_NUM
			,case
				when E.C1 BETWEEN TT.cauSt AND TT.cauEd then "전일 주의"
				when E.C1 BETWEEN TT.cwdSt AND TT.cwdEd then "전일 혼잡"
				ELSE "없음" END
		   AS c1_res
		   ,case
				when E.C2 BETWEEN TT.cauSt AND TT.cauEd then "전일 주의"
				when E.C2 BETWEEN TT.cwdSt AND TT.cwdEd then "전일 혼잡"
				ELSE "없음" END
		   AS c2_res
		   ,case
				when E.C3 BETWEEN TT.cauSt AND TT.cauEd then "전일 주의"
				when E.C3 BETWEEN TT.cwdSt AND TT.cwdEd then "전일 혼잡"
				ELSE "없음" END
		   AS c3_res
		   ,case
				when E.C4 BETWEEN TT.cauSt AND TT.cauEd then "전일 주의"
				when E.C4 BETWEEN TT.cwdSt AND TT.cwdEd then "전일 혼잡"
				ELSE "없음" END
		   AS c4_res
		   ,case
				when E.C5 BETWEEN TT.cauSt AND TT.cauEd then "전일 주의"
				when E.C5 BETWEEN TT.cwdSt AND TT.cwdEd then "전일 혼잡"
				ELSE "없음" END
		   AS c5_res
		   ,case
				when E.C6 BETWEEN TT.cauSt AND TT.cauEd then "전일 주의"
				when E.C6 BETWEEN TT.cwdSt AND TT.cwdEd then "전일 혼잡"
				ELSE "없음" END
		   AS c6_res
		   ,case
				when E.C7 BETWEEN TT.cauSt AND TT.cauEd then "전일 주의"
				when E.C7 BETWEEN TT.cwdSt AND TT.cwdEd then "전일 혼잡"
				ELSE "없음" END
		   AS c7_res
		   ,case
				when E.C8 BETWEEN TT.cauSt AND TT.cauEd then "전일 주의"
				when E.C8 BETWEEN TT.cwdSt AND TT.cwdEd then "전일 혼잡"
				ELSE "없음" END
		   AS c8_res
		
			,case
				when E.D1 BETWEEN TT.cauSt AND TT.cauEd then "금일 주의"
				when E.D1 BETWEEN TT.cwdSt AND TT.cwdEd then "금일 혼잡"
				ELSE "없음" END
		   AS d1_res
		   ,case
				when E.D2 BETWEEN TT.cauSt AND TT.cauEd then "금일 주의"
				when E.D2 BETWEEN TT.cwdSt AND TT.cwdEd then "금일 혼잡"
				ELSE "없음" END
		   AS d2_res
		   ,case
				when E.D3 BETWEEN TT.cauSt AND TT.cauEd then "금일 주의"
				when E.D3 BETWEEN TT.cwdSt AND TT.cwdEd then "금일 혼잡"
				ELSE "없음" END
		   AS d3_res
		   ,case
				when E.D4 BETWEEN TT.cauSt AND TT.cauEd then "금일 주의"
				when E.D4 BETWEEN TT.cwdSt AND TT.cwdEd then "금일 혼잡"
				ELSE "없음" END
		   AS d4_res
		   ,case
				when E.D5 BETWEEN TT.cauSt AND TT.cauEd then "금일 주의"
				when E.D5 BETWEEN TT.cwdSt AND TT.cwdEd then "금일 혼잡"
				ELSE "없음" END
		   AS d5_res
		   ,case
				when E.D6 BETWEEN TT.cauSt AND TT.cauEd then "금일 주의"
				when E.D6 BETWEEN TT.cwdSt AND TT.cwdEd then "금일 혼잡"
				ELSE "없음" END
		   AS d6_res
		   ,case
				when E.D7 BETWEEN TT.cauSt AND TT.cauEd then "금일 주의"
				when E.D7 BETWEEN TT.cwdSt AND TT.cwdEd then "금일 혼잡"
				ELSE "없음" END
		   AS d7_res
		   ,case
				when E.D8 BETWEEN TT.cauSt AND TT.cauEd then "금일 주의"
				when E.D8 BETWEEN TT.cwdSt AND TT.cwdEd then "금일 혼잡"
				ELSE "없음" END
		   AS d8_res
		FROM
		(
			SELECT 
			    CAST((SELECT set_val FROM config_info WHERE set_name=CONCAT(kt.keyt,'Caust')) AS UNSIGNED) AS cauSt
				,CAST((SELECT set_val FROM config_info WHERE set_name=CONCAT(kt.keyt,'CauEd')) AS UNSIGNED) AS cauEd
				,CAST((SELECT set_val FROM config_info WHERE set_name=CONCAT(kt.keyt,'CwdSt')) AS UNSIGNED) AS cwdSt
				,CAST((SELECT set_val FROM config_info WHERE set_name=CONCAT(kt.keyt,'CwdEd')) AS UNSIGNED) AS cwdEd
			FROM 
			(
				SELECT 
					CASE 
					WHEN CURTIME() <![CDATA[ >= ]]> DTV.goworkSt AND CURTIME() <![CDATA[ <= ]]> DTV.goworkEd then "gwWgt"
					WHEN CURTIME() <![CDATA[ >= ]]> DTV.gohomeSt AND CURTIME() <![CDATA[ <= ]]> DTV.gohomeEd then "ghWgt"
					ELSE "dayWgt" END AS keyt
				FROM	(SELECT * FROM day_term) DTV
			)kt
		) TT,	
		
		(
			SELECT TI.*,D.* FROM
			(SELECT TRAIN_NUM FROM tcms_info) TI
			LEFT OUTER JOIN
			(
				SELECT IFNULL(C.CAR1,C.CAR2) AS CAR_NUM
				,C.C1,C.C2,C.C3,C.C4,C.C5,C.C6,C.C7,C.C8
				,C.D1,C.D2,C.D3,C.D4,C.D5,C.D6,C.D7,C.D8
				FROM
				(
					SELECT A.*,B.* FROM
						(
						SELECT 
								 car_num AS CAR1
								,ROUND(AVG(car_wgt_1),-1) AS C1
								,ROUND(AVG(car_wgt_2),-1) AS C2
								,ROUND(AVG(car_wgt_3),-1) AS C3
								,ROUND(AVG(car_wgt_4),-1) AS C4
								,ROUND(AVG(car_wgt_5),-1) AS C5	
								,ROUND(AVG(car_wgt_6),-1) AS C6
								,ROUND(AVG(car_wgt_7),-1) AS C7
								,ROUND(AVG(car_wgt_8),-1) AS C8
							FROM tcms_log
							WHERE 
							snd_dt 
							between 
							DATE_SUB(DATE_SUB(NOW(),INTERVAL 1 DAY),INTERVAL #{timeRange} MINUTE) 
							AND DATE_SUB(NOW(),INTERVAL 1 DAY)
							GROUP BY car_num
						) A
					LEFT OUTER JOIN 
						(
							SELECT 
								 car_num AS CAR2
								,ROUND(AVG(car_wgt_1),-1) AS D1
								,ROUND(AVG(car_wgt_2),-1) AS D2
								,ROUND(AVG(car_wgt_3),-1) AS D3
								,ROUND(AVG(car_wgt_4),-1) AS D4
								,ROUND(AVG(car_wgt_5),-1) AS D5	
								,ROUND(AVG(car_wgt_6),-1) AS D6
								,ROUND(AVG(car_wgt_7),-1) AS D7
								,ROUND(AVG(car_wgt_8),-1) AS D8
							FROM tcms_log
							WHERE 
							snd_dt 
							between 
							DATE_SUB(NOW(),INTERVAL #{timeRange} MINUTE) 
							AND NOW()
							GROUP BY car_num
						) B
					ON A.CAR1=B.CAR2
								
					UNION
								
					SELECT A.*,B.* FROM
						(
						SELECT 
								 car_num AS CAR1
								,ROUND(AVG(car_wgt_1),-1) AS C1
								,ROUND(AVG(car_wgt_2),-1) AS C2
								,ROUND(AVG(car_wgt_3),-1) AS C3
								,ROUND(AVG(car_wgt_4),-1) AS C4
								,ROUND(AVG(car_wgt_5),-1) AS C5	
								,ROUND(AVG(car_wgt_6),-1) AS C6
								,ROUND(AVG(car_wgt_7),-1) AS C7
								,ROUND(AVG(car_wgt_8),-1) AS C8
							FROM tcms_log
							WHERE 
							snd_dt 
							between 
							DATE_SUB(DATE_SUB(NOW(),INTERVAL 1 DAY),INTERVAL #{timeRange} MINUTE) 
							AND 
							DATE_SUB(NOW(),INTERVAL 1 DAY)
							GROUP BY car_num
						) A
					RIGHT OUTER JOIN 
						(
							SELECT 
								 car_num AS CAR2
								,ROUND(AVG(car_wgt_1),-1) AS D1
								,ROUND(AVG(car_wgt_2),-1) AS D2
								,ROUND(AVG(car_wgt_3),-1) AS D3
								,ROUND(AVG(car_wgt_4),-1) AS D4
								,ROUND(AVG(car_wgt_5),-1) AS D5	
								,ROUND(AVG(car_wgt_6),-1) AS D6
								,ROUND(AVG(car_wgt_7),-1) AS D7
								,ROUND(AVG(car_wgt_8),-1) AS D8
							FROM tcms_log
							WHERE snd_dt between 
							DATE_SUB(NOW(),INTERVAL #{timeRange} MINUTE) 
							AND NOW()
							GROUP BY car_num
						) B
					ON A.CAR1=B.CAR2
				) C
			)D
			ON TI.TRAIN_NUM = D.CAR_NUM
		)E
		ORDER BY E.TRAIN_NUM ASC
	</select>
	
	<!-- 단일편성 테이블 목록 -->
	<resultMap type="terminalVO" id="trainTable">
		<result property="idx" 		column=	"IDX"	/>
		<result property="trainNum"	column=	"TRAIN_NUM"	/>
		<result property="rst" 	column=	"RST"/>
	</resultMap>
	<select id="trainTable"  parameterType="java.lang.String" resultMap="trainTable">
		SELECT 
			case when idx<![CDATA[ < ]]>10 then 
				CONCAT("#0",CAST(idx AS UNSIGNED))
			ELSE 
				CONCAT("#",CAST(idx AS UNSIGNED))
			end as idx
			,A.t1 AS train_num, B.t2
			,if(B.t2 IN(A.t1),"Y","N") AS rst
		FROM
			(
				SELECT idx,train_num AS t1 FROM tcms_info GROUP BY train_num ORDER BY idx ASC 
			) A
			LEFT OUTER JOIN
			(
				SELECT car_num AS t2
				FROM tcms_log 
				WHERE
					snd_dt <![CDATA[ > ]]> CONCAT(#{sdate}," ","03:00:00")
					AND snd_dt<![CDATA[ < ]]> CONCAT(#{sdate}," ","02:59:59") + INTERVAL 1 DAY
				AND car_num IN 
					(SELECT train_num FROM tcms_info GROUP BY train_num ORDER BY idx) 
				GROUP BY car_num ORDER BY car_num
			) B
		ON (A.t1=B.t2)
		ORDER BY RST DESC, IDX ASC
	</select>
	
	
	<!-- 일일 통계 -->
	<resultMap type="statisticVO" id="dayTermByRange">
	    <result property="title"		column=	"TITLE"	/>
		<result property="rlxCnt"		column=	"RLX_CNT"	/>
		<result property="usCnt"		column=	"US_CNT"	/>
		<result property="careCnt"		column=	"CARE_CNT"	/>
		<result property="cwdCnt"		column=	"CWD_CNT"	/>
		<result property="avgCwd"		column=	"AVG_CWD"	/>
		<result property="minWgt"		column=	"MIN_WGT"	/>
		<result property="minTnum"	    column=	"MIN_TNUM"	/>
		<result property="minDt"		column=	"MIN_DT"	/>
		<result property="maxWgt"		column=	"MAX_WGT"	/>
		<result property="maxTnum"		column=	"MAX_TNUM"	/>
		<result property="maxDt"		column=	"MAX_DT"	/>
	</resultMap>
	<select id="dayTermByRange" parameterType="java.lang.String" resultMap="dayTermByRange">
		WITH gw AS
		(
			SELECT A.* FROM
			<choose>
		        <when test="st == 'goworkSt'">gw_crowd_cnt A</when>
		        <when test="st == 'gohomeSt'">gh_crowd_cnt A</when>
		        <otherwise>day_crowd_cnt A</otherwise>
		    </choose> 
			,
			(SELECT 
				 STR_TO_DATE((SELECT set_val FROM config_info WHERE set_name = #{st}), '%T') AS st
				,STR_TO_DATE((SELECT set_val FROM config_info WHERE set_name = #{ed}), '%T') AS ed
			FROM DUAL
			)B
			WHERE 1=1 
			AND
			(
				( 
					TIMEDIFF(b.ed,b.st) <![CDATA[ >= ]]> 0 AND 
					A.snd_dt between 
					CONCAT(#{sdate}," ",b.st) AND CONCAT(#{sdate}," ",b.ed) 
				)
				OR
				( 
					TIMEDIFF(b.ed,b.st) <![CDATA[ < ]]> 0 AND
					A.snd_dt between 
					CONCAT(#{sdate}," ",b.st) AND CONCAT(#{sdate}," ","02:59:59") + INTERVAL 1 DAY  
				)
			) 
			<if test='trainNum !=null and trainNum neq "" '> 
				AND A.CNUM=#{trainNum}
			</if>
		)
		SELECT
			 A.TITLE AS TITLE
			,A.RLX_CNT	AS RLX_CNT
			,A.US_CNT	AS US_CNT
			,A.CARE_CNT  AS CARE_CNT
			,A.CWD_CNT	AS CWD_CNT
			,IFNULL(A.AVG_CWD	 , '데이터 없음' ) AS AVG_CWD
			,IFNULL(A.MIN_WGT	 , '데이터 없음' ) AS MIN_WGT
			,IFNULL(A.MIN_TNUM	 , '데이터 없음' ) AS MIN_TNUM
			,IFNULL(A.MIN_DT	 , '데이터 없음' ) AS MIN_DT
			,IFNULL(A.MAX_WGT	 , '데이터 없음' ) AS MAX_WGT
			,IFNULL(A.MAX_TNUM	 , '데이터 없음' ) AS MAX_TNUM
			,IFNULL(A.MAX_DT	 , '데이터 없음' ) AS MAX_DT
		FROM 
		(
			SELECT
				<choose>
			        <when test="st == 'goworkSt'">"출근"</when>
			        <when test="st == 'daySt'">"주간"</when>
			        <when test="st == 'gohomeSt'">"퇴근"</when>
			        <otherwise>"야간"</otherwise>
			    </choose> AS TITLE
				,COUNT(gw.c1_rlx)  + COUNT(gw.c2_rlx)  + COUNT(gw.c3_rlx)  + COUNT(gw.c4_rlx)  + COUNT(gw.c5_rlx)  + COUNT(gw.c6_rlx)  + COUNT(gw.c7_rlx)  + COUNT(gw.c8_rlx)  AS rlx_cnt
				,COUNT(gw.c1_us)   + COUNT(gw.c2_us)   + COUNT(gw.c3_us)   + COUNT(gw.c4_us)   + COUNT(gw.c5_us)   + COUNT(gw.c6_us)   + COUNT(gw.c7_us)   + COUNT(gw.c8_us)   AS us_cnt
				,COUNT(gw.c1_care) + COUNT(gw.c2_care) + COUNT(gw.c3_care) + COUNT(gw.c4_care) + COUNT(gw.c5_care) + COUNT(gw.c6_care) + COUNT(gw.c7_care) + COUNT(gw.c8_care) AS care_cnt
				,COUNT(gw.c1_cwd)  + COUNT(gw.c2_cwd)  + COUNT(gw.c3_cwd)  + COUNT(gw.c4_cwd)  + COUNT(gw.c5_cwd)  + COUNT(gw.c6_cwd)  + COUNT(gw.c7_cwd)  + COUNT(gw.c8_cwd)  AS cwd_cnt
				,ROUND(AVG(gw.avg_cwd),-1) AS avg_cwd
				,MIN(smin.min_cwd) AS min_wgt
				,DATE_FORMAT(smin.snd_dt ,'%Y-%m-%d %H:%i:%s') AS min_dt
				,smin.tnum AS min_tnum
				,MAX(smax.max_cwd) AS max_wgt
				,DATE_FORMAT(smax.snd_dt ,'%Y-%m-%d %H:%i:%s') AS max_dt
				,smax.tnum AS max_tnum
			FROM gw,
				(SELECT * FROM gw ORDER BY min_cwd ASC, snd_dt DESC LIMIT 1) smin,
				(SELECT * FROM gw order BY max_cwd DESC, snd_dt DESC LIMIT 1) smax
		)A
	</select>
	
	<!-- 월간(일별) 통계 -->
	<!-- 달력함수 union의 정수가 녹아있는 쿼리 -->
	<resultMap type="statisticVO" id="mdTermByRange">
	    <result property="title"		column=	"TITLE"	/>
		<result property="rlxCnt"		column=	"RLX_CNT"	/>
		<result property="usCnt"		column=	"US_CNT"	/>
		<result property="careCnt"		column=	"CARE_CNT"	/>
		<result property="cwdCnt"		column=	"CWD_CNT"	/>
		<result property="avgCwd"		column=	"AVG_CWD"	/>
		<result property="minWgt"		column=	"MIN_WGT"	/>
		<result property="minTnum"	    column=	"MIN_TNUM"	/>
		<result property="minDt"		column=	"MIN_DT"	/>
		<result property="maxWgt"		column=	"MAX_WGT"	/>
		<result property="maxTnum"		column=	"MAX_TNUM"	/>
		<result property="maxDt"		column=	"MAX_DT"	/>
	</resultMap>
	<select id="mdTermByRange" parameterType="java.lang.String" resultMap="mdTermByRange">
		WITH RECURSIVE cte AS (
		    SELECT 1 AS n
		    UNION ALL
		    SELECT n + 1 FROM cte WHERE 
			 n <![CDATA[ < ]]> (SELECT DAY(LAST_DAY(CONCAT(#{sdate},"-01")))  FROM DUAL)
		)
		SELECT 
			 a.n AS title 
			,b.RLX_CNT	AS RLX_CNT
			,b.US_CNT	AS US_CNT
			,b.CARE_CNT  AS CARE_CNT
			,b.CWD_CNT	AS CWD_CNT
			,IFNULL(b.AVG_CWD	 , '데이터 없음' ) AS AVG_CWD
			,IFNULL(b.MIN_WGT	 , '데이터 없음' ) AS MIN_WGT
			,IFNULL(b.MIN_TNUM   , '데이터 없음' ) AS MIN_TNUM
			,IFNULL(b.MIN_DT	 , '데이터 없음' ) AS MIN_DT
			,IFNULL(b.MAX_WGT	 , '데이터 없음' ) AS MAX_WGT
			,IFNULL(b.MAX_TNUM   , '데이터 없음' ) AS MAX_TNUM
			,IFNULL(b.MAX_DT	 , '데이터 없음' ) AS MAX_DT
		FROM 
		 (SELECT n FROM cte) a
			LEFT JOIN
		(SELECT * FROM md_stc WHERE key_date=#{sdate} ORDER BY key_date ASC, CAST(title AS UNSIGNED) ASC) b
		ON(a.n=b.title)
	</select>
	
		
	<!-- 월별 통계1 -->
	<resultMap type="statisticVO" id="monTermByRange">
	    <result property="title"		column=	"TITLE"	/>
		<result property="rlxCnt"		column=	"RLX_CNT"	/>
		<result property="usCnt"		column=	"US_CNT"	/>
		<result property="careCnt"		column=	"CARE_CNT"	/>
		<result property="cwdCnt"		column=	"CWD_CNT"	/>
		<result property="avgCwd"		column=	"AVG_CWD"	/>
		<result property="minWgt"		column=	"MIN_WGT"	/>
		<result property="minTnum"	    column=	"MIN_TNUM"	/>
		<result property="minDt"		column=	"MIN_DT"	/>
		<result property="maxWgt"		column=	"MAX_WGT"	/>
		<result property="maxTnum"		column=	"MAX_TNUM"	/>
		<result property="maxDt"		column=	"MAX_DT"	/>
	</resultMap>
	<select id="monTermByRange" parameterType="java.lang.String" resultMap="monTermByRange">
		WITH RECURSIVE cte AS (
		    SELECT 1 AS n
		    UNION ALL
		    SELECT n + 1 FROM cte WHERE 
			 n <![CDATA[ < ]]> 12
		)
		SELECT 
			a.n AS title 
			,b.RLX_CNT	AS RLX_CNT
			,b.US_CNT	AS US_CNT
			,b.CARE_CNT  AS CARE_CNT
			,b.CWD_CNT	AS CWD_CNT
			,IFNULL(b.AVG_CWD	 , '데이터 없음' ) AS AVG_CWD
			,IFNULL(b.MIN_WGT	 , '데이터 없음' ) AS MIN_WGT
			,IFNULL(b.MIN_TNUM   , '데이터 없음' ) AS MIN_TNUM
			,IFNULL(b.MIN_DT	 , '데이터 없음' ) AS MIN_DT
			,IFNULL(b.MAX_WGT	 , '데이터 없음' ) AS MAX_WGT
			,IFNULL(b.MAX_TNUM   , '데이터 없음' ) AS MAX_TNUM
			,IFNULL(b.MAX_DT	 , '데이터 없음' ) AS MAX_DT
		FROM 
		 (SELECT n FROM cte) a
			LEFT JOIN
		(SELECT * FROM mon_stc WHERE key_date=#{sdate} ORDER BY key_date ASC, CAST(title AS UNSIGNED) ASC) b
		ON(a.n=b.title)
	</select>
	
	<!--연간 통계 -->
	<resultMap type="statisticVO" id="yearTermByRange">
	    <result property="title"		column=	"TITLE"	/>
		<result property="rlxCnt"		column=	"RLX_CNT"	/>
		<result property="usCnt"		column=	"US_CNT"	/>
		<result property="careCnt"		column=	"CARE_CNT"	/>
		<result property="cwdCnt"		column=	"CWD_CNT"	/>
		<result property="avgCwd"		column=	"AVG_CWD"	/>
		<result property="minWgt"		column=	"MIN_WGT"	/>
		<result property="minTnum"	    column=	"MIN_TNUM"	/>
		<result property="minDt"		column=	"MIN_DT"	/>
		<result property="maxWgt"		column=	"MAX_WGT"	/>
		<result property="maxTnum"		column=	"MAX_TNUM"	/>
		<result property="maxDt"		column=	"MAX_DT"	/>
	</resultMap>
	<select id="yearTermByRange" parameterType="java.lang.String" resultMap="yearTermByRange">
		WITH RECURSIVE cte AS (
		    SELECT #{sdate} AS n
		    UNION ALL
		    SELECT n + 1 FROM cte WHERE 
			 n <![CDATA[ < ]]> #{edate}
		)
		SELECT 
			a.n AS title 
			,b.RLX_CNT	AS RLX_CNT
			,b.US_CNT	AS US_CNT
			,b.CARE_CNT  AS CARE_CNT
			,b.CWD_CNT	AS CWD_CNT
			,IFNULL(b.AVG_CWD	 , '데이터 없음' ) AS AVG_CWD
			,IFNULL(b.MIN_WGT	 , '데이터 없음' ) AS MIN_WGT
			,IFNULL(b.MIN_TNUM   , '데이터 없음' ) AS MIN_TNUM
			,IFNULL(b.MIN_DT	 , '데이터 없음' ) AS MIN_DT
			,IFNULL(b.MAX_WGT	 , '데이터 없음' ) AS MAX_WGT
			,IFNULL(b.MAX_TNUM   , '데이터 없음' ) AS MAX_TNUM
			,IFNULL(b.MAX_DT	 , '데이터 없음' ) AS MAX_DT
		FROM 
		 (SELECT n FROM cte) a
			LEFT JOIN
		(SELECT * FROM year_stc WHERE key_date between #{sdate} and #{edate} ORDER BY key_date ASC, CAST(title AS UNSIGNED) ASC) b
		ON(a.n=b.title)
		ORDER BY b.title
	</select>
	
	<!-- 계절별 통계 -->
	<resultMap type="statisticVO" id="seaTermByRange">
	    <result property="title"		column=	"TITLE"	/>
		<result property="rlxCnt"		column=	"RLX_CNT"	/>
		<result property="usCnt"		column=	"US_CNT"	/>
		<result property="careCnt"		column=	"CARE_CNT"	/>
		<result property="cwdCnt"		column=	"CWD_CNT"	/>
		<result property="avgCwd"		column=	"AVG_CWD"	/>
		<result property="minWgt"		column=	"MIN_WGT"	/>
		<result property="minTnum"	    column=	"MIN_TNUM"	/>
		<result property="minDt"		column=	"MIN_DT"	/>
		<result property="maxWgt"		column=	"MAX_WGT"	/>
		<result property="maxTnum"		column=	"MAX_TNUM"	/>
		<result property="maxDt"		column=	"MAX_DT"	/>
	</resultMap>
	<select id="seaTermByRange" parameterType="java.lang.String" resultMap="seaTermByRange">
		WITH RECURSIVE cte AS (
		    SELECT 1 AS n
		    UNION ALL
		    SELECT n + 1 FROM cte WHERE 
			 n <![CDATA[ < ]]> 4
		)
		
			SELECT 
				 tl.title AS title
				,tt.RLX_CNT	AS RLX_CNT
				,tt.US_CNT	AS US_CNT
				,tt.CARE_CNT  AS CARE_CNT
				,tt.CWD_CNT	AS CWD_CNT
				,IFNULL(tt.AVG_CWD	 , '데이터 없음' ) AS avg_cwd
				,IFNULL(tt.MIN_WGT	 , '데이터 없음' ) AS MIN_WGT
				,IFNULL(tt.MIN_TNUM   , '데이터 없음' ) AS MIN_TNUM
				,IFNULL(tt.MIN_DT	 , '데이터 없음' ) AS MIN_DT
				,IFNULL(tt.MAX_WGT	 , '데이터 없음' ) AS MAX_WGT
				,IFNULL(tt.MAX_TNUM   , '데이터 없음' ) AS MAX_TNUM
				,IFNULL(tt.MAX_DT	 , '데이터 없음' ) AS MAX_DT
			FROM 
			(SELECT 
			n,
			case 
				when n=1 then "봄"
				when n=2 then "여름"
				when n=3 then "가을"
				ELSE "겨울" END AS title FROM cte
			) tl
			LEFT JOIN
			(
				(
					SELECT aa.*,bb.*
					FROM 
					(
						SELECT
							"봄" AS TITLE
							,SUM(yrv.RLX_CNT)	AS RLX_CNT
							,SUM(yrv.US_CNT)		AS US_CNT
							,SUM(yrv.CARE_CNT)  	AS CARE_CNT
							,SUM(yrv.CWD_CNT)	AS CWD_CNT
							,IFNULL(ROUND(AVG(yrv.AVG_CWD),0), '데이터 없음' ) AS AVG_CWD
							,IFNULL(yrv.MIN_WGT	 , '데이터 없음' ) AS MIN_WGT
							,IFNULL(yrv.MIN_TNUM  	 , '데이터 없음' ) AS MIN_TNUM
							,IFNULL(yrv.MIN_DT	 , '데이터 없음' ) AS MIN_DT
							
						FROM (SELECT * FROM sea_stc WHERE key_date=#{sdate})yrv, sea_term b WHERE 1=1
						AND 
						(
							(b.springEd-b.springSt <![CDATA[ > ]]>  0 AND title BETWEEN b.springSt AND b.springEd)
							OR
							(b.springEd-b.springSt <![CDATA[ <= ]]> 0 AND (title <![CDATA[ >= ]]> b.springSt or title <![CDATA[ <= ]]> b.springEd))
						)
						ORDER BY yrv.min_wgt asc
					)aa,	
					(
						SELECT 
							 IFNULL(yrv.MAX_WGT	 , '데이터 없음' ) AS MAX_WGT
							,IFNULL(yrv.MAX_TNUM , '데이터 없음' ) AS MAX_TNUM
							,IFNULL(yrv.MAX_DT	 , '데이터 없음' ) AS MAX_DT
							
						FROM (SELECT * FROM sea_stc WHERE key_date=#{sdate})yrv, sea_term b WHERE 1=1
						AND 
						(
							(b.springEd-b.springSt <![CDATA[ > ]]>  0 AND title BETWEEN b.springSt AND b.springEd)
							OR
							(b.springEd-b.springSt <![CDATA[ <= ]]> 0 AND (title <![CDATA[ >= ]]> b.springSt or title <![CDATA[ <= ]]> b.springEd))
						)
						ORDER BY yrv.max_wgt DESC LIMIT 1
					)bb
				)
				UNION
				(
					SELECT aa.*,bb.*
					FROM 
					(
						SELECT 
							"여름" AS TITLE
							,SUM(yrv.RLX_CNT)	AS RLX_CNT
							,SUM(yrv.US_CNT)		AS US_CNT
							,SUM(yrv.CARE_CNT)  	AS CARE_CNT
							,SUM(yrv.CWD_CNT)	AS CWD_CNT
							,IFNULL(ROUND(AVG(yrv.AVG_CWD),0), '데이터 없음' ) AS AVG_CWD
							,IFNULL(yrv.MIN_WGT	 , '데이터 없음' ) AS MIN_WGT
							,IFNULL(yrv.MIN_TNUM, '데이터 없음' ) AS MIN_TNUM
							,IFNULL(yrv.MIN_DT	 , '데이터 없음' ) AS MIN_DT
							
						FROM (SELECT * FROM sea_stc WHERE key_date=#{sdate})yrv, sea_term b WHERE 1=1
						AND 
						(
							(b.summerEd-b.summerSt <![CDATA[ > ]]>  0 AND title BETWEEN b.summerSt AND b.summerEd)
							OR
							(b.summerEd-b.summerSt <![CDATA[ <= ]]> 0 AND (title <![CDATA[ >= ]]> b.summerSt or title <![CDATA[ <= ]]> b.summerEd))
						)
						ORDER BY yrv.min_wgt asc
					)aa,	
					(
						SELECT 
							 IFNULL(yrv.MAX_WGT	 , '데이터 없음' ) AS MAX_WGT
							,IFNULL(yrv.MAX_TNUM  	 , '데이터 없음' ) AS MAX_TNUM
							,IFNULL(yrv.MAX_DT	 , '데이터 없음' ) AS MAX_DT
							
						FROM (SELECT * FROM sea_stc WHERE key_date=#{sdate})yrv, sea_term b WHERE 1=1
						AND 
						(
							(b.summerEd-b.summerSt <![CDATA[ > ]]>  0 AND title BETWEEN b.summerSt AND b.summerEd)
							OR
							(b.summerEd-b.summerSt <![CDATA[ <= ]]> 0 AND (title <![CDATA[ >= ]]> b.summerSt or title <![CDATA[ <= ]]> b.summerEd))
						)
						ORDER BY yrv.max_wgt DESC LIMIT 1
					)bb
				)
				UNION
				(
					SELECT aa.*,bb.*
					FROM 
					(
						SELECT 
							"가을" AS TITLE
							,SUM(yrv.RLX_CNT)	AS RLX_CNT
							,SUM(yrv.US_CNT)		AS US_CNT
							,SUM(yrv.CARE_CNT)  	AS CARE_CNT
							,SUM(yrv.CWD_CNT)	AS CWD_CNT
							,IFNULL(ROUND(AVG(yrv.AVG_CWD),0)	 , '데이터 없음' ) AS AVG_CWD
							,IFNULL(yrv.MIN_WGT	 , '데이터 없음' ) AS MIN_WGT
							,IFNULL(yrv.MIN_TNUM  	 , '데이터 없음' ) AS MIN_TNUM
							,IFNULL(yrv.MIN_DT	 , '데이터 없음' ) AS MIN_DT
							
						FROM (SELECT * FROM sea_stc WHERE key_date=#{sdate})yrv, sea_term b WHERE 1=1
						AND 
						(
							(b.autumnEd-b.autumnSt <![CDATA[ > ]]>  0 AND title BETWEEN b.autumnSt AND b.autumnEd)
							OR
							(b.autumnEd-b.autumnSt <![CDATA[ <= ]]> 0 AND (title <![CDATA[ >= ]]> b.autumnSt or title <![CDATA[ <= ]]> b.autumnEd))
						)
						ORDER BY yrv.min_wgt asc
					)aa,	
					(
						SELECT 
							 IFNULL(yrv.MAX_WGT	 , '데이터 없음' ) AS MAX_WGT
							,IFNULL(yrv.MAX_TNUM  	 , '데이터 없음' ) AS MAX_TNUM
							,IFNULL(yrv.MAX_DT	 , '데이터 없음' ) AS MAX_DT
							
						FROM (SELECT * FROM sea_stc WHERE key_date=#{sdate})yrv, sea_term b WHERE 1=1
						AND 
						(
							(b.autumnEd-b.autumnSt <![CDATA[ > ]]>  0 AND title BETWEEN b.autumnSt AND b.autumnEd)
							OR
							(b.autumnEd-b.autumnSt <![CDATA[ <= ]]> 0 AND (title <![CDATA[ >= ]]> b.autumnSt or title <![CDATA[ <= ]]> b.autumnEd))
						)
						ORDER BY yrv.max_wgt DESC LIMIT 1
					)bb
				)
				UNION
				(
					SELECT aa.*,bb.*
					FROM 
					(
						SELECT 
							"겨울" AS TITLE
							,SUM(yrv.RLX_CNT)	AS RLX_CNT
							,SUM(yrv.US_CNT)		AS US_CNT
							,SUM(yrv.CARE_CNT)  	AS CARE_CNT
							,SUM(yrv.CWD_CNT)	AS CWD_CNT
							,IFNULL(ROUND(AVG(yrv.AVG_CWD),0)	 , '데이터 없음' ) AS AVG_CWD
							,IFNULL(yrv.MIN_WGT	 , '데이터 없음' ) AS MIN_WGT
							,IFNULL(yrv.MIN_TNUM  	 , '데이터 없음' ) AS MIN_TNUM
							,IFNULL(yrv.MIN_DT	 , '데이터 없음' ) AS MIN_DT
							
						FROM (SELECT * FROM sea_stc WHERE key_date=#{sdate})yrv, sea_term b WHERE 1=1
						AND 
						(
							(b.winterEd-b.winterSt <![CDATA[ > ]]>  0 AND title BETWEEN b.winterSt AND b.winterEd)
							OR
							(b.winterEd-b.winterSt <![CDATA[ <= ]]> 0 AND (title <![CDATA[ >= ]]> b.winterSt or title <![CDATA[ <= ]]> b.winterEd))
						)
						ORDER BY yrv.min_wgt asc
					)aa,	
					(
						SELECT 
							 IFNULL(yrv.MAX_WGT	 , '데이터 없음' ) AS MAX_WGT
							,IFNULL(yrv.MAX_TNUM  	 , '데이터 없음' ) AS MAX_TNUM
							,IFNULL(yrv.MAX_DT	 , '데이터 없음' ) AS MAX_DT
							
						FROM (SELECT * FROM sea_stc WHERE key_date=#{sdate})yrv, sea_term b WHERE 1=1
						AND 
						(
							(b.winterEd-b.winterSt <![CDATA[ > ]]>  0 AND title BETWEEN b.winterSt AND b.winterEd)
							OR
							(b.winterEd-b.winterSt <![CDATA[ <= ]]> 0 AND (title <![CDATA[ >= ]]> b.winterSt or title <![CDATA[ <= ]]> b.winterEd))
						)
						ORDER BY yrv.max_wgt DESC LIMIT 1
					)bb
				)
			)tt
		ON(tl.title=tt.title)
		ORDER BY tl.n
	</select>
		
	<!--tcms 로그데이터 조회 -->
	<resultMap type="logDataVO" id="dataLogListTcms">
		<result property="ldYear" 	column=	"LD_YEAR"/>
		<result property="ldCnt"	column=	"LD_CNT" />
		<result property="ldPer" 	column=	"LD_PER" />
	</resultMap>
	<select id="dataLogListTcms"  resultMap="dataLogListTcms">
		SELECT 
			 A.dt AS ld_year
			,A.dt_cnt AS ld_cnt
			,CONCAT(ROUND((A.dt_cnt/A.all_cnt)*100,2),"%") AS ld_per
		FROM 
		(
			SELECT 
				 YEAR(snd_dt) AS dt
				,COUNT(snd_dt) AS dt_cnt 
				,(SELECT COUNT(train_num) FROM tcms_log) AS all_cnt
			FROM tcms_log 
			GROUP BY YEAR(snd_dt)
		) A
	</select>
		
	<!--hse 로그데이터 조회 -->
	<resultMap type="logDataVO" id="dataLogListHse">
		<result property="ldYear" 	column=	"LD_YEAR"/>
		<result property="ldCnt"	column=	"LD_CNT" />
		<result property="ldPer" 	column=	"LD_PER" />
	</resultMap>
	<select id="dataLogListHse"  resultMap="dataLogListHse">
		SELECT 
			 A.dt AS ld_year
			,A.dt_cnt AS ld_cnt
			,CONCAT(ROUND((A.dt_cnt/A.all_cnt)*100,2),"%") AS ld_per
		FROM 
		(
			SELECT 
				 YEAR(snd_dt) AS dt
				,COUNT(snd_dt) AS dt_cnt 
				,(SELECT COUNT(train_num) FROM tcms_log) AS all_cnt
			FROM cong_log 
			GROUP BY YEAR(snd_dt)
		) A
	</select>
	
	<!-- 로그데이터 삭제 -->
	<delete id="dataLogDeleteTcms">
		DELETE FROM tcms_log 
		WHERE YEAR(snd_dt) IN
		<foreach collection="chkList" item="item" index="index" separator="," open="(" close=")">
            #{item}
        </foreach>
	</delete>
	
	<!-- 로그데이터 삭제 -->
	<delete id="dataLogDeleteHse">
		DELETE FROM cong_log 
		WHERE YEAR(snd_dt) IN
		<foreach collection="chkList" item="item" index="index" separator="," open="(" close=")">
            #{item}
        </foreach>
	</delete>
	
	<!-- ################################################### -->
	
	
	
	<!-- tcms로그와 통계 테이블 시간 비교 -->
	<!-- where 절에서 case 쓰는거 명시 -->
	<select id="chkDt"  resultType="java.lang.String">
		
		SELECT a.key_date FROM 	
			(
				SELECT DISTINCT DATE(snd_dt) AS key_date 
				FROM tcms_log 
				WHERE snd_dt <![CDATA[ < ]]> DATE(NOW()) ORDER BY snd_dt desc
			)a
			,(SELECT IFNULL(MAX(FN_DATE),NULL) AS FN_DATE FROM md_stc)b
		WHERE 1=1 
		AND
		(
			(b.fn_date IS NULL and a.key_date <![CDATA[ < ]]> DATE(NOW()))
			OR 
			(b.fn_date IS NOT NULL and a.key_date <![CDATA[ > ]]> b.fn_date-INTERVAL 1 DAY )
		)
		
	</select>
	
	<!-- tcms로그와 통계 테이블 시간 비교해서 없는거 월간일별 통계에 삽입 -->
	<insert id="insertMdStc" parameterType="java.lang.String">
		INSERT INTO md_stc(
			 KEY_DATE	
			,TITLE		
			,RLX_CNT	
			,US_CNT		
			,CARE_CNT	
			,CWD_CNT	
			,AVG_CWD	
			,MIN_WGT	
			,MIN_TNUM	
			,MIN_DT		
			,MAX_WGT	
			,MAX_TNUM	
			,MAX_DT		
			,FN_DATE
		)
		WITH mv AS( 
			SELECT tt.* FROM md_crowd_cnt tt 
			WHERE tt.snd_dt 
			BETWEEN CONCAT(#{dt}," ",CURTIME()) 
			AND CONCAT(#{dt}," ",CURTIME()) + INTERVAL 1 DAY 
		) 
		SELECT A.* FROM 
		( 
			SELECT DATE_FORMAT(#{dt},"%Y-%m") AS key_date 
			,DAY(#{dt}) AS title 
			,COUNT(mv.c1_rlx) + COUNT(mv.c2_rlx) + COUNT(mv.c3_rlx) + COUNT(mv.c4_rlx) + COUNT(mv.c5_rlx) + COUNT(mv.c6_rlx) + COUNT(mv.c7_rlx) + COUNT(mv.c8_rlx) AS rlx_cnt 
			,COUNT(mv.c1_us) + COUNT(mv.c2_us) + COUNT(mv.c3_us) + COUNT(mv.c4_us) + COUNT(mv.c5_us) + COUNT(mv.c6_us) + COUNT(mv.c7_us) + COUNT(mv.c8_us) AS us_cnt 
			,COUNT(mv.c1_care) + COUNT(mv.c2_care) + COUNT(mv.c3_care) + COUNT(mv.c4_care) + COUNT(mv.c5_care) + COUNT(mv.c6_care) + COUNT(mv.c7_care) + COUNT(mv.c8_care) AS care_cnt 
			,COUNT(mv.c1_cwd) + COUNT(mv.c2_cwd) + COUNT(mv.c3_cwd) + COUNT(mv.c4_cwd) + COUNT(mv.c5_cwd) + COUNT(mv.c6_cwd) + COUNT(mv.c7_cwd) + COUNT(mv.c8_cwd) AS cwd_cnt 
			,ROUND(AVG(mv.avg_cwd),0) AS avg_cwd 
			,smin.min_cwd AS min_wgt 
			,smin.tnum AS min_tnum 
			,smin.snd_dt AS min_dt 
			,smax.max_cwd AS max_wgt 
			,smax.tnum AS max_tnum 
			,smax.snd_dt AS max_dt 
			,NOW() AS FN_DATE FROM 
			mv, 
			(SELECT * FROM mv where min_cwd <![CDATA[ > ]]> 50 ORDER BY min_cwd ASC, snd_dt DESC LIMIT 1) smin, 
			(SELECT * FROM mv order BY max_cwd DESC, snd_dt DESC LIMIT 1) smax 
		) A 
		WHERE A.RLX_CNT !=0 or A.US_CNT !=0 or A.CARE_CNT !=0 or A.CWD_CNT != 0 
	</insert>
	
	
	<!-- 월별로 tcms와 월별통계 데이터 체크 -->
	<resultMap type="ChkDateVO" id="chkMon">
		<result property="yr" 	column=	"YR"/>
		<result property="mn"	column=	"MN" />
		<result property="minDt" 	column=	"MIN_DT" />
		<result property="maxDt" 	column=	"MAX_DT" />
	</resultMap>
	<select id="chkMon"  resultMap="chkMon">
		SELECT 
			YEAR(a.key_date) AS yr, 
			MONTH(a.key_date) AS mn,
			MIN(a.key_date) AS min_dt,
			MAX(a.key_date) AS max_dt
		FROM 
		(
			SELECT a.key_date FROM 	
				(
					SELECT DISTINCT DATE(snd_dt) AS key_date 
					FROM tcms_log 
					WHERE snd_dt <![CDATA[ < ]]> DATE(NOW()) ORDER BY snd_dt ASC
				)a
				,(SELECT IFNULL(MAX(FN_DATE),NULL) AS FN_DATE FROM mon_stc)b
			WHERE 1=1 
			AND
			(
				( b.fn_date IS NULL and a.key_date <![CDATA[ < ]]> DATE(NOW()) )
				OR 
				( b.fn_date IS NOT NULL and a.key_date <![CDATA[ > ]]> b.fn_date-INTERVAL 1 DAY )
			)
		)a
		GROUP BY yr,mn ORDER BY yr ASC 
	</select>
	
	<!-- 월별로 tcms와 월별통계 데이터 체크 -->
	<resultMap type="StatisticVO" id="findMonData">
	    <result property="keyDate"		column=	"KEY_DATE"	/>
	    <result property="title"		column=	"TITLE"	/>
		<result property="rlxCnt"		column=	"RLX_CNT"	/>
		<result property="usCnt"		column=	"US_CNT"	/>
		<result property="careCnt"		column=	"CARE_CNT"	/>
		<result property="cwdCnt"		column=	"CWD_CNT"	/>
		<result property="avgCwd"		column=	"AVG_CWD"	/>
		<result property="minWgt"		column=	"MIN_WGT"	/>
		<result property="minTnum"	    column=	"MIN_TNUM"	/>
		<result property="minDt"		column=	"MIN_DT"	/>
		<result property="maxWgt"		column=	"MAX_WGT"	/>
		<result property="maxTnum"		column=	"MAX_TNUM"	/>
		<result property="maxDt"		column=	"MAX_DT"	/>
		<result property="fnDate"		column=	"FN_DATE"	/>
	</resultMap>
	<select id="findMonData"  parameterType="ChkDateVO"  resultMap="findMonData">
		SELECT * FROM mon_stc WHERE key_date=#{yr} AND title=#{mn}
	</select>
	
	<!-- 로그를 통계테이블에 넣을수 있도록 가공 -->
	<resultMap type="StatisticVO" id="setTcmsMonStc">
	    <result property="keyDate"		column=	"KEY_DATE"	/>
	    <result property="title"		column=	"TITLE"	/>
		<result property="rlxCnt"		column=	"RLX_CNT"	/>
		<result property="usCnt"		column=	"US_CNT"	/>
		<result property="careCnt"		column=	"CARE_CNT"	/>
		<result property="cwdCnt"		column=	"CWD_CNT"	/>
		<result property="avgCwd"		column=	"AVG_CWD"	/>
		<result property="minWgt"		column=	"MIN_WGT"	/>
		<result property="minTnum"	    column=	"MIN_TNUM"	/>
		<result property="minDt"		column=	"MIN_DT"	/>
		<result property="maxWgt"		column=	"MAX_WGT"	/>
		<result property="maxTnum"		column=	"MAX_TNUM"	/>
		<result property="maxDt"		column=	"MAX_DT"	/>
		<result property="fnDate"		column=	"FN_DATE"	/>
	</resultMap>
	<select id="setTcmsMonStc"  parameterType="ChkDateVO"  resultMap="setTcmsMonStc">
    	<!-- 뷰 테이블은 집계 첫일과 말일의 달 전체 로그 데이터 가져옴 -->
    	WITH bmv AS(
			SELECT 
			tt.*
			FROM mon_crowd_cnt tt
			WHERE tt.snd_dt BETWEEN 
			CONCAT(LAST_DAY(#{minDt} - INTERVAL 1 month) + interval 1 DAY," ",CURTIME()) 
			AND CONCAT(#{maxDt}," ",CURTIME()) + INTERVAL 1 DAY 
		)
		SELECT 
			 #{yr} AS key_date
			,#{mn} AS title
			,mv.rlx_cnt AS rlx_cnt
			,mv.us_cnt AS us_cnt
			,mv.care_cnt AS care_cnt
			,mv.cwd_cnt AS cwd_cnt
			,av.avg_cwd AS avg_cwd
			,smin.min_cwd AS min_wgt
			,smin.tnum AS min_tnum
			,smin.snd_dt AS min_dt
			,smax.max_cwd AS max_wgt
			,smax.tnum AS max_tnum
			,smax.snd_dt AS max_dt
			,NOW() AS FN_DATE
		FROM 
		<!-- 평균값은 월 첫일부터 말일(또는 오늘) 값 가져옴 -->
		(SELECT ROUND(AVG(avg_cwd),0) AS avg_cwd FROM bmv) av,
		<!-- 여유보통주의혼잡 수치는 없는 신규 추가된 것만 가져옴 -->
		(
			SELECT 
			COUNT(c1_rlx)  + COUNT(c2_rlx)  + COUNT(c3_rlx)  + COUNT(c4_rlx)  + COUNT(c5_rlx)  + COUNT(c6_rlx)  + COUNT(c7_rlx)  + COUNT(c8_rlx)  AS rlx_cnt
			,COUNT(c1_us)   + COUNT(c2_us)   + COUNT(c3_us)   + COUNT(c4_us)   + COUNT(c5_us)   + COUNT(c6_us)   + COUNT(c7_us)   + COUNT(c8_us)   AS us_cnt
			,COUNT(c1_care) + COUNT(c2_care) + COUNT(c3_care) + COUNT(c4_care) + COUNT(c5_care) + COUNT(c6_care) + COUNT(c7_care) + COUNT(c8_care) AS care_cnt
			,COUNT(c1_cwd)  + COUNT(c2_cwd)  + COUNT(c3_cwd)  + COUNT(c4_cwd)  + COUNT(c5_cwd)  + COUNT(c6_cwd)  + COUNT(c7_cwd)  + COUNT(c8_cwd)  AS cwd_cnt
			FROM bmv 
			WHERE snd_dt 
			BETWEEN CONCAT(#{minDt}," ",CURTIME()) 
			 AND CONCAT(#{maxDt}," ",CURTIME()) + INTERVAL 1 DAY
		 ) mv,
		 <!-- 최대 최소 데이터관련은 월 첫일부터 말일(또는 오늘) 값 가져옴 -->
	  	(SELECT min_cwd,tnum,snd_dt FROM bmv where min_cwd <![CDATA[ > ]]> 50 ORDER BY min_cwd ASC, snd_dt DESC LIMIT 1) smin,
		(SELECT max_cwd,tnum,snd_dt FROM bmv order BY max_cwd DESC, snd_dt DESC LIMIT 1) smax
    
	</select>
	
	<insert id="insertMonStc" parameterType="StatisticVO">
		INSERT INTO mon_stc(
			 KEY_DATE	
			,TITLE		
			,RLX_CNT	
			,US_CNT		
			,CARE_CNT	
			,CWD_CNT	
			,AVG_CWD	
			,MIN_WGT	
			,MIN_TNUM	
			,MIN_DT		
			,MAX_WGT	
			,MAX_TNUM	
			,MAX_DT		
			,FN_DATE
		)
		VALUES(
			 #{keyDate}
			,#{title}
			,#{rlxCnt}
			,#{usCnt}
			,#{careCnt}
			,#{cwdCnt}
			,#{avgCwd}
			,#{minWgt}
			,#{minTnum}
			,#{minDt}
			,#{maxWgt}
			,#{maxTnum}
			,#{maxDt}
			,NOW()
		)
	</insert>
	
	<!-- 새로 add한 data 업데이트-->
	<update id="updateMonStc" parameterType="StatisticVO">
		UPDATE MON_STC
		SET
			 RLX_CNT	= 	#{rlxCnt}
			,US_CNT		= 	#{usCnt}
			,CARE_CNT	= 	#{careCnt}
			,CWD_CNT	= 	#{cwdCnt}
			,AVG_CWD	= 	#{avgCwd}
			,MIN_WGT	= 	#{minWgt}
			,MIN_TNUM	= 	#{minTnum}
			,MIN_DT		= 	#{minDt}
			,MAX_WGT	= 	#{maxWgt}
			,MAX_TNUM	= 	#{maxTnum}
			,MAX_DT		= 	#{maxDt}
			,FN_DATE    = 	NOW()
		WHERE KEY_DATE	= 	#{keyDate}
		AND   TITLE		= 	#{title}
	</update>
	
	
	
	
	
	
	<!-- 년도별로 tcms와 월별통계 데이터 체크 -->
	<resultMap type="ChkDateVO" id="chkYear">
		<result property="yr" 	column=	"YR"/>
		<result property="mn"	column=	"MN" />
		<result property="minDt" 	column=	"MIN_DT" />
		<result property="maxDt" 	column=	"MAX_DT" />
	</resultMap>
	<select id="chkYear"  resultMap="chkYear">
		SELECT 
			YEAR(a.key_date) AS yr, 
			MIN(a.key_date) AS min_dt,
			MAX(a.key_date) AS max_dt
		FROM 
		(
			SELECT a.key_date FROM 	
				(
					SELECT DISTINCT DATE(snd_dt) AS key_date 
					FROM tcms_log 
					WHERE snd_dt <![CDATA[ < ]]> DATE(NOW()) ORDER BY snd_dt ASC
				)a
				,(SELECT IFNULL(MAX(FN_DATE),NULL) AS FN_DATE FROM YEAR_STC)b
			WHERE 1=1 
			AND
			(
				( b.fn_date IS NULL and a.key_date <![CDATA[ < ]]> DATE(NOW()) )
				OR 
				( b.fn_date IS NOT NULL and a.key_date <![CDATA[ > ]]> b.fn_date-INTERVAL 1 DAY )
			)
		)a
		GROUP BY(yr) ORDER BY yr ASC 
	</select>
	
	<!-- 년도별로 tcms와 월별통계 데이터 체크 -->
	<resultMap type="StatisticVO" id="findYearData">
	    <result property="keyDate"		column=	"KEY_DATE"	/>
	    <result property="title"		column=	"TITLE"	/>
		<result property="rlxCnt"		column=	"RLX_CNT"	/>
		<result property="usCnt"		column=	"US_CNT"	/>
		<result property="careCnt"		column=	"CARE_CNT"	/>
		<result property="cwdCnt"		column=	"CWD_CNT"	/>
		<result property="avgCwd"		column=	"AVG_CWD"	/>
		<result property="minWgt"		column=	"MIN_WGT"	/>
		<result property="minTnum"	    column=	"MIN_TNUM"	/>
		<result property="minDt"		column=	"MIN_DT"	/>
		<result property="maxWgt"		column=	"MAX_WGT"	/>
		<result property="maxTnum"		column=	"MAX_TNUM"	/>
		<result property="maxDt"		column=	"MAX_DT"	/>
		<result property="fnDate"		column=	"FN_DATE"	/>
	</resultMap>
	<select id="findYearData"  parameterType="ChkDateVO"  resultMap="findYearData">
		SELECT * FROM YEAR_STC WHERE key_date=#{yr}
	</select>
	
	<!-- 로그를 통계테이블에 넣을수 있도록 가공 -->
	<resultMap type="StatisticVO" id="setTcmsYearStc">
	    <result property="keyDate"		column=	"KEY_DATE"	/>
	    <result property="title"		column=	"TITLE"	/>
		<result property="rlxCnt"		column=	"RLX_CNT"	/>
		<result property="usCnt"		column=	"US_CNT"	/>
		<result property="careCnt"		column=	"CARE_CNT"	/>
		<result property="cwdCnt"		column=	"CWD_CNT"	/>
		<result property="avgCwd"		column=	"AVG_CWD"	/>
		<result property="minWgt"		column=	"MIN_WGT"	/>
		<result property="minTnum"	    column=	"MIN_TNUM"	/>
		<result property="minDt"		column=	"MIN_DT"	/>
		<result property="maxWgt"		column=	"MAX_WGT"	/>
		<result property="maxTnum"		column=	"MAX_TNUM"	/>
		<result property="maxDt"		column=	"MAX_DT"	/>
		<result property="fnDate"		column=	"FN_DATE"	/>
	</resultMap>
	<select id="setTcmsYearStc"  parameterType="ChkDateVO"  resultMap="setTcmsYearStc">
    	<!-- 뷰 테이블은 집계 첫일과 말일의 달 전체 로그 데이터 가져옴 -->
    	WITH bmv AS(
			SELECT 
			tt.*
			FROM year_crowd_cnt tt
			WHERE tt.snd_dt BETWEEN 
			CONCAT(LAST_DAY(#{minDt} - INTERVAL 1 month) + interval 1 DAY," ",CURTIME()) 
			AND CONCAT(#{maxDt}," ",CURTIME()) + INTERVAL 1 DAY 
		)
		SELECT 
			 #{yr} AS key_date
			,#{yr} AS title
			,mv.rlx_cnt AS rlx_cnt
			,mv.us_cnt AS us_cnt
			,mv.care_cnt AS care_cnt
			,mv.cwd_cnt AS cwd_cnt
			,av.avg_cwd AS avg_cwd
			,smin.min_cwd AS min_wgt
			,smin.tnum AS min_tnum
			,smin.snd_dt AS min_dt
			,smax.max_cwd AS max_wgt
			,smax.tnum AS max_tnum
			,smax.snd_dt AS max_dt
			,NOW() AS FN_DATE
		FROM 
		<!-- 평균값은 월 첫일부터 말일(또는 오늘) 값 가져옴 -->
		(SELECT ROUND(AVG(avg_cwd),0) AS avg_cwd FROM bmv) av,
		<!-- 여유보통주의혼잡 수치는 없는 신규 추가된 것만 가져옴 -->
		(
			SELECT 
			COUNT(c1_rlx)  + COUNT(c2_rlx)  + COUNT(c3_rlx)  + COUNT(c4_rlx)  + COUNT(c5_rlx)  + COUNT(c6_rlx)  + COUNT(c7_rlx)  + COUNT(c8_rlx)  AS rlx_cnt
			,COUNT(c1_us)   + COUNT(c2_us)   + COUNT(c3_us)   + COUNT(c4_us)   + COUNT(c5_us)   + COUNT(c6_us)   + COUNT(c7_us)   + COUNT(c8_us)   AS us_cnt
			,COUNT(c1_care) + COUNT(c2_care) + COUNT(c3_care) + COUNT(c4_care) + COUNT(c5_care) + COUNT(c6_care) + COUNT(c7_care) + COUNT(c8_care) AS care_cnt
			,COUNT(c1_cwd)  + COUNT(c2_cwd)  + COUNT(c3_cwd)  + COUNT(c4_cwd)  + COUNT(c5_cwd)  + COUNT(c6_cwd)  + COUNT(c7_cwd)  + COUNT(c8_cwd)  AS cwd_cnt
			FROM bmv 
			WHERE snd_dt 
			BETWEEN CONCAT(#{minDt}," ",CURTIME()) 
			 AND CONCAT(#{maxDt}," ",CURTIME()) + INTERVAL 1 DAY
		 ) mv,
		 <!-- 최대 최소 데이터관련은 월 첫일부터 말일(또는 오늘) 값 가져옴 -->
	  	(SELECT min_cwd,tnum,snd_dt FROM bmv where min_cwd <![CDATA[ > ]]> 50 ORDER BY min_cwd ASC, snd_dt DESC LIMIT 1) smin,
		(SELECT max_cwd,tnum,snd_dt FROM bmv order BY max_cwd DESC, snd_dt DESC LIMIT 1) smax
    
	</select>
	
	<insert id="insertYearStc" parameterType="StatisticVO">
		INSERT INTO YEAR_STC(
			 KEY_DATE	
			,TITLE		
			,RLX_CNT	
			,US_CNT		
			,CARE_CNT	
			,CWD_CNT	
			,AVG_CWD	
			,MIN_WGT	
			,MIN_TNUM	
			,MIN_DT		
			,MAX_WGT	
			,MAX_TNUM	
			,MAX_DT		
			,FN_DATE
		)
		VALUES(
			 #{keyDate}
			,#{title}
			,#{rlxCnt}
			,#{usCnt}
			,#{careCnt}
			,#{cwdCnt}
			,#{avgCwd}
			,#{minWgt}
			,#{minTnum}
			,#{minDt}
			,#{maxWgt}
			,#{maxTnum}
			,#{maxDt}
			,NOW()
		)
	</insert>
	
	<!-- 새로 add한 data 업데이트-->
	<update id="updateYearStc" parameterType="StatisticVO">
		UPDATE YEAR_STC
		SET
			 RLX_CNT	= 	#{rlxCnt}
			,US_CNT		= 	#{usCnt}
			,CARE_CNT	= 	#{careCnt}
			,CWD_CNT	= 	#{cwdCnt}
			,AVG_CWD	= 	#{avgCwd}
			,MIN_WGT	= 	#{minWgt}
			,MIN_TNUM	= 	#{minTnum}
			,MIN_DT		= 	#{minDt}
			,MAX_WGT	= 	#{maxWgt}
			,MAX_TNUM	= 	#{maxTnum}
			,MAX_DT		= 	#{maxDt}
			,FN_DATE    = 	NOW()
		WHERE KEY_DATE	= 	#{keyDate}
		AND   TITLE		= 	#{title}
	</update>
	
	
	
		
	<!-- 계절별로 tcms와 월별통계 데이터 체크 -->
	<resultMap type="ChkDateVO" id="chkSea">
		<result property="yr" 	column=	"YR"/>
		<result property="mn"	column=	"MN" />
		<result property="minDt" 	column=	"MIN_DT" />
		<result property="maxDt" 	column=	"MAX_DT" />
	</resultMap>
	<select id="chkSea"  resultMap="chkSea">
	    
	    SELECT 
			YEAR(a.key_date) AS yr, 
			MONTH(a.key_date) AS mn,
			MIN(a.key_date) AS min_dt,
			MAX(a.key_date) AS max_dt
		FROM 
		(
			SELECT a.key_date FROM 	
				(
					SELECT DISTINCT DATE(snd_dt) AS key_date 
					FROM tcms_log 
					WHERE snd_dt <![CDATA[ < ]]> DATE(NOW()) ORDER BY snd_dt ASC
				)a
				,(SELECT IFNULL(MAX(FN_DATE),NULL) AS FN_DATE FROM sea_stc)b
			WHERE 1=1 
			AND
			(
				( b.fn_date IS NULL and a.key_date <![CDATA[ < ]]> DATE(NOW()) )
				OR 
				( b.fn_date IS NOT NULL and a.key_date <![CDATA[ > ]]> b.fn_date-INTERVAL 1 DAY )
			)
		)a
		GROUP BY yr,mn ORDER BY yr ASC 
	   
	</select>
	
	<!-- 년도별로 tcms와 월별통계 데이터 체크 -->
	<resultMap type="StatisticVO" id="findSeaData">
	    <result property="keyDate"		column=	"KEY_DATE"	/>
	    <result property="title"		column=	"TITLE"	/>
		<result property="rlxCnt"		column=	"RLX_CNT"	/>
		<result property="usCnt"		column=	"US_CNT"	/>
		<result property="careCnt"		column=	"CARE_CNT"	/>
		<result property="cwdCnt"		column=	"CWD_CNT"	/>
		<result property="avgCwd"		column=	"AVG_CWD"	/>
		<result property="minWgt"		column=	"MIN_WGT"	/>
		<result property="minTnum"	    column=	"MIN_TNUM"	/>
		<result property="minDt"		column=	"MIN_DT"	/>
		<result property="maxWgt"		column=	"MAX_WGT"	/>
		<result property="maxTnum"		column=	"MAX_TNUM"	/>
		<result property="maxDt"		column=	"MAX_DT"	/>
		<result property="fnDate"		column=	"FN_DATE"	/>
	</resultMap>
	<select id="findSeaData"  parameterType="ChkDateVO"  resultMap="findSeaData">
		SELECT * FROM sea_stc WHERE key_date=#{yr} AND title=#{mn}
	</select>
	
	<!-- 로그를 통계테이블에 넣을수 있도록 가공 -->
	<resultMap type="StatisticVO" id="setTcmsSeaStc">
	    <result property="keyDate"		column=	"KEY_DATE"	/>
	    <result property="title"		column=	"TITLE"	/>
		<result property="rlxCnt"		column=	"RLX_CNT"	/>
		<result property="usCnt"		column=	"US_CNT"	/>
		<result property="careCnt"		column=	"CARE_CNT"	/>
		<result property="cwdCnt"		column=	"CWD_CNT"	/>
		<result property="avgCwd"		column=	"AVG_CWD"	/>
		<result property="minWgt"		column=	"MIN_WGT"	/>
		<result property="minTnum"	    column=	"MIN_TNUM"	/>
		<result property="minDt"		column=	"MIN_DT"	/>
		<result property="maxWgt"		column=	"MAX_WGT"	/>
		<result property="maxTnum"		column=	"MAX_TNUM"	/>
		<result property="maxDt"		column=	"MAX_DT"	/>
		<result property="fnDate"		column=	"FN_DATE"	/>
	</resultMap>
	<select id="setTcmsSeaStc"  parameterType="ChkDateVO"  resultMap="setTcmsSeaStc">
    	<!-- 뷰 테이블은 집계 첫일과 말일의 달 전체 로그 데이터 가져옴 -->
    	WITH bmv AS(
			SELECT 
			tt.*
			FROM sea_crowd_cnt tt
			WHERE tt.snd_dt BETWEEN 
			CONCAT(LAST_DAY(#{minDt} - INTERVAL 1 month) + interval 1 DAY," ",CURTIME()) 
			AND CONCAT(#{maxDt}," ",CURTIME()) + INTERVAL 1 DAY 
		)
		SELECT 
			 #{yr} AS key_date
			,#{mn} AS title
			,mv.rlx_cnt AS rlx_cnt
			,mv.us_cnt AS us_cnt
			,mv.care_cnt AS care_cnt
			,mv.cwd_cnt AS cwd_cnt
			,av.avg_cwd AS avg_cwd
			,smin.min_cwd AS min_wgt
			,smin.tnum AS min_tnum
			,smin.snd_dt AS min_dt
			,smax.max_cwd AS max_wgt
			,smax.tnum AS max_tnum
			,smax.snd_dt AS max_dt
			,NOW() AS FN_DATE
		FROM 
		<!-- 평균값은 월 첫일부터 말일(또는 오늘) 값 가져옴 -->
		(SELECT ROUND(AVG(avg_cwd),0) AS avg_cwd FROM bmv) av,
		<!-- 여유보통주의혼잡 수치는 없는 신규 추가된 것만 가져옴 -->
		(
			SELECT 
			COUNT(c1_rlx)  + COUNT(c2_rlx)  + COUNT(c3_rlx)  + COUNT(c4_rlx)  + COUNT(c5_rlx)  + COUNT(c6_rlx)  + COUNT(c7_rlx)  + COUNT(c8_rlx)  AS rlx_cnt
			,COUNT(c1_us)   + COUNT(c2_us)   + COUNT(c3_us)   + COUNT(c4_us)   + COUNT(c5_us)   + COUNT(c6_us)   + COUNT(c7_us)   + COUNT(c8_us)   AS us_cnt
			,COUNT(c1_care) + COUNT(c2_care) + COUNT(c3_care) + COUNT(c4_care) + COUNT(c5_care) + COUNT(c6_care) + COUNT(c7_care) + COUNT(c8_care) AS care_cnt
			,COUNT(c1_cwd)  + COUNT(c2_cwd)  + COUNT(c3_cwd)  + COUNT(c4_cwd)  + COUNT(c5_cwd)  + COUNT(c6_cwd)  + COUNT(c7_cwd)  + COUNT(c8_cwd)  AS cwd_cnt
			FROM bmv 
			WHERE snd_dt 
			BETWEEN CONCAT(#{minDt}," ",CURTIME()) 
			 AND CONCAT(#{maxDt}," ",CURTIME()) + INTERVAL 1 DAY
		 ) mv,
		 <!-- 최대 최소 데이터관련은 월 첫일부터 말일(또는 오늘) 값 가져옴 -->
	  	(SELECT min_cwd,tnum,snd_dt FROM bmv where min_cwd <![CDATA[ > ]]> 50 ORDER BY min_cwd ASC, snd_dt DESC LIMIT 1) smin,
		(SELECT max_cwd,tnum,snd_dt FROM bmv order BY max_cwd DESC, snd_dt DESC LIMIT 1) smax
    
	</select>
	
	<insert id="insertSeaStc" parameterType="StatisticVO">
		INSERT INTO SEA_STC(
			 KEY_DATE	
			,TITLE		
			,RLX_CNT	
			,US_CNT		
			,CARE_CNT	
			,CWD_CNT	
			,AVG_CWD	
			,MIN_WGT	
			,MIN_TNUM	
			,MIN_DT		
			,MAX_WGT	
			,MAX_TNUM	
			,MAX_DT		
			,FN_DATE
		)
		VALUES(
			 #{keyDate}
			,#{title}
			,#{rlxCnt}
			,#{usCnt}
			,#{careCnt}
			,#{cwdCnt}
			,#{avgCwd}
			,#{minWgt}
			,#{minTnum}
			,#{minDt}
			,#{maxWgt}
			,#{maxTnum}
			,#{maxDt}
			,NOW()
		)
	</insert>
	
	<!-- 새로 add한 data 업데이트-->
	<update id="updateSeaStc" parameterType="StatisticVO">
		UPDATE SEA_STC
		SET
			 RLX_CNT	= 	#{rlxCnt}
			,US_CNT		= 	#{usCnt}
			,CARE_CNT	= 	#{careCnt}
			,CWD_CNT	= 	#{cwdCnt}
			,AVG_CWD	= 	#{avgCwd}
			,MIN_WGT	= 	#{minWgt}
			,MIN_TNUM	= 	#{minTnum}
			,MIN_DT		= 	#{minDt}
			,MAX_WGT	= 	#{maxWgt}
			,MAX_TNUM	= 	#{maxTnum}
			,MAX_DT		= 	#{maxDt}
			,FN_DATE    = 	NOW()
		WHERE KEY_DATE	= 	#{keyDate}
		AND   TITLE		= 	#{title}
	</update>
	
	<!-- 일일통계 산점도 -->
	<resultMap type="ScatterVO" id="scatterChart">
		<result property="xDate" 	column=	"SDT"	/>
		<result property="wgt"		column=	"CAR_WGT"	/>
	</resultMap>
	<select id="scatterChart"  parameterType="java.lang.String" resultMap="scatterChart">
		SELECT 
		 	 DATE_FORMAT(snd_dt ,'%Y-%m-%d %H:%i:%s') AS SDT
		 	 <choose>
				<when test ="carWgt==1">
					,car_wgt_1 AS CAR_WGT	    
				</when>
				<when test ="carWgt==2">
					,car_wgt_2 AS CAR_WGT	    
				</when>
				<when test ="carWgt==3">
					,car_wgt_3 AS CAR_WGT	    
				</when>
				<when test ="carWgt==4">
					,car_wgt_4 AS CAR_WGT	    
				</when>
				<when test ="carWgt==5">
					,car_wgt_5 AS CAR_WGT	    
				</when>
				<otherwise>
					,car_wgt_6 AS CAR_WGT				    
				</otherwise>		 	     
		 	 </choose>
		FROM tcms_log
		WHERE 
			snd_dt <![CDATA[ > ]]> CONCAT(#{sDate}," ","03:00:00")
			AND snd_dt<![CDATA[ < ]]> CONCAT(#{sDate}," ","02:59:59") + INTERVAL 1 DAY   
			<if test='trainNum !=null and trainNum neq "" '>    
				AND car_num=#{trainNum}
			</if>
		ORDER BY SND_DT ASC	
	</select>
	
	<!-- 누적영역차트  -->
	<resultMap type="StkAreaVO" id="stkAreaChart">
		<result property="sumCnt" 	column=	"SUM_CNT"	/>
		<result property="hh"		column=	"HH"	/>
		<result property="cnt"		column=	"CNT"	/>
	</resultMap>
	<select id="stkAreaChart"  parameterType="java.lang.String" resultMap="stkAreaChart">
		SELECT A.*
			,(@rownum:=@rownum+A.cnt) AS SUM_CNT
			FROM 
			(
				SELECT 
				 HOUR(snd_dt) AS HH
				,COUNT(*) AS CNT
				FROM tcms_log
				WHERE 
					snd_dt <![CDATA[ > ]]> CONCAT(#{sDate}," ","03:00:00")
					AND snd_dt<![CDATA[ < ]]> CONCAT(#{sDate}," ","02:59:59") + INTERVAL 1 DAY
					<if test='trainNum !=null and trainNum neq "" '>    
						AND car_num=#{trainNum}
					</if>
				GROUP BY HOUR(snd_dt)	
				ORDER BY snd_dt ASC 	
			) A, (select @rownum:=0) xx
	</select>
	
	<!-- 현재시간이 어떤 시간대인지 판별 -->
	<select id="whenNowTime"  resultType="java.lang.String">
		SELECT 
			case
			when a.tt BETWEEN b.goworkSt AND b.goworkEd then 'gw'
			when a.tt BETWEEN b.gohomeSt AND b.gohomeEd then 'gh'
			ELSE 'day'END AS nowT
		FROM 
		(SELECT DATE_FORMAT(NOW(),"%H:%i:%S") AS tt FROM DUAL) a,
		(SELECT * FROM day_term) b
	</select>
	
	<!-- 메인 1. 금일 5분전 현재 열차별 여보주혼 -->
	<resultMap type="statisticVO" id="stkBarTod">
	    <result property="trainNum"		column=	"TRAIN_NUM"	/>
	    <result property="cnum"			column=	"CNUM"		/>
		<result property="rlxCnt"		column=	"RLX_CNT"	/>
		<result property="usCnt"		column=	"US_CNT"	/>
		<result property="careCnt"		column=	"CARE_CNT"	/>
		<result property="cwdCnt"		column=	"CWD_CNT"	/>
		<result property="allCnt"		column=	"ALL_CNT"	/>
		<result property="ccCnt"		column=	"CC_CNT"	/>
	</resultMap>
	<select id="stkBarTod" resultMap="stkBarTod">
		WITH gw AS
		(
			SELECT *
			FROM
			<choose>
		        <when test="nowTR == 'gw'">gw_crowd_cnt A</when>
		        <when test="nowTR == 'gh'">gh_crowd_cnt A</when>
		        <otherwise>day_crowd_cnt A</otherwise>
		    </choose> 
		 	WHERE snd_dt 
			between 
			DATE_SUB(NOW(),INTERVAL 5 MINUTE) 
			AND NOW()
		)
		
		SELECT TI.*,b.* FROM
		(SELECT TRAIN_NUM FROM tcms_info) TI
		LEFT OUTER JOIN
		(	
			SELECT a.*
			,rlx_cnt+us_cnt+care_cnt+cwd_cnt AS all_cnt
			,care_cnt+cwd_cnt AS cc_cnt
			FROM 
			(
			SELECT 
			   cnum
				,COUNT(gw.c1_rlx)  + COUNT(gw.c2_rlx)  + COUNT(gw.c3_rlx)  + COUNT(gw.c4_rlx)  + COUNT(gw.c5_rlx)  + COUNT(gw.c6_rlx)  + COUNT(gw.c7_rlx)  + COUNT(gw.c8_rlx)  AS rlx_cnt
				,COUNT(gw.c1_us)   + COUNT(gw.c2_us)   + COUNT(gw.c3_us)   + COUNT(gw.c4_us)   + COUNT(gw.c5_us)   + COUNT(gw.c6_us)   + COUNT(gw.c7_us)   + COUNT(gw.c8_us)   AS us_cnt
				,COUNT(gw.c1_care) + COUNT(gw.c2_care) + COUNT(gw.c3_care) + COUNT(gw.c4_care) + COUNT(gw.c5_care) + COUNT(gw.c6_care) + COUNT(gw.c7_care) + COUNT(gw.c8_care) AS care_cnt
				,COUNT(gw.c1_cwd)  + COUNT(gw.c2_cwd)  + COUNT(gw.c3_cwd)  + COUNT(gw.c4_cwd)  + COUNT(gw.c5_cwd)  + COUNT(gw.c6_cwd)  + COUNT(gw.c7_cwd)  + COUNT(gw.c8_cwd)  AS cwd_cnt
			FROM gw GROUP BY cnum
			) a
		)b
		ON TI.TRAIN_NUM = b.CNUM
	</select>
	
	<!-- 메인 2. 선택한 열차의 1~6량의 각 량별 실제 혼잡도 수치 -->
	<resultMap type="statisticVO" id="oneTrAllRyang">
	    <result property="sndDt"	column=	"SND_DT"	/>
	    <result property="cnum"		column=	"CAR_NUM"	/>
		<result property="cw1"		column=	"CAR_WGT_1"	/>
		<result property="cw2"		column=	"CAR_WGT_2"	/>
		<result property="cw3"		column=	"CAR_WGT_3"	/>
		<result property="cw4"		column=	"CAR_WGT_4"	/>
		<result property="cw5"		column=	"CAR_WGT_5"	/>
		<result property="cw6"		column=	"CAR_WGT_6"	/>
		<result property="c1"		column=	"c1"		/>
		<result property="c2"		column=	"c2"		/>
		<result property="c3"		column=	"c3"		/>
		<result property="c4"		column=	"c4"		/>
		<result property="c5"		column=	"c5"		/>
		<result property="c6"		column=	"c6"		/>				
	</resultMap>
	<select id="oneTrAllRyang" parameterType="java.lang.String" resultMap="oneTrAllRyang">
		SELECT 
		a.*
		,case 
		 when a.car_num <![CDATA[ >= ]]> 200 then 
			case 
			when a.car_wgt_1 BETWEEN c.rlxDvSt AND rgr.st_wgt_1 + c.rlxDvEd  then "여유"
			when a.car_wgt_1 BETWEEN rgr.st_wgt_1 + c.UsDvSt  AND rgr.st_wgt_1 + c.UsDvEd then "보통"
			when a.car_wgt_1 BETWEEN rgr.st_wgt_1 + c.cauDvSt AND rgr.st_wgt_1 + c.cauDvEd then "주의"
			ELSE "혼잡" END 
		ELSE 
			case 
			when a.car_wgt_1 BETWEEN c.rlxDvSt AND drt.st_wgt_1 + c.rlxDvEd  then "여유"
			when a.car_wgt_1 BETWEEN drt.st_wgt_1 + c.UsDvSt  AND drt.st_wgt_1 + c.UsDvEd then "보통"
			when a.car_wgt_1 BETWEEN drt.st_wgt_1 + c.cauDvSt AND drt.st_wgt_1 + c.cauDvEd then "주의"
			ELSE "혼잡" END 
		END AS c1
		,case 
		 when a.car_num <![CDATA[ >= ]]> 200 then
			case 
			when a.car_wgt_2 BETWEEN c.rlxDvSt AND rgr.st_wgt_2 + c.rlxDvEd  then "여유"
			when a.car_wgt_2 BETWEEN rgr.st_wgt_2 + c.UsDvSt  AND rgr.st_wgt_2 + c.UsDvEd then "보통"
			when a.car_wgt_2 BETWEEN rgr.st_wgt_2 + c.cauDvSt AND rgr.st_wgt_2 + c.cauDvEd then "주의"
			ELSE "혼잡" END 
		ELSE 
			case 
			when a.car_wgt_2 BETWEEN c.rlxDvSt AND drt.st_wgt_2 + c.rlxDvEd  then "여유"
			when a.car_wgt_2 BETWEEN drt.st_wgt_2 + c.UsDvSt  AND drt.st_wgt_2 + c.UsDvEd then "보통"
			when a.car_wgt_2 BETWEEN drt.st_wgt_2 + c.cauDvSt AND drt.st_wgt_2 + c.cauDvEd then "주의"
			ELSE "혼잡" END 
		END AS c2
		,case 
		 when a.car_num <![CDATA[ >= ]]> 200 then	
			case
			when a.car_wgt_3 BETWEEN c.rlxDvSt AND rgr.st_wgt_3 + c.rlxDvEd  then "여유"
			when a.car_wgt_3 BETWEEN rgr.st_wgt_3 + c.UsDvSt  AND rgr.st_wgt_3 + c.UsDvEd then "보통"
			when a.car_wgt_3 BETWEEN rgr.st_wgt_3 + c.cauDvSt AND rgr.st_wgt_3 + c.cauDvEd then "주의"
			ELSE "혼잡" END 
		ELSE 
			case
			when a.car_wgt_3 BETWEEN c.rlxDvSt AND drt.st_wgt_3 + c.rlxDvEd  then "여유"
			when a.car_wgt_3 BETWEEN drt.st_wgt_3 + c.UsDvSt  AND drt.st_wgt_3 + c.UsDvEd then "보통"
			when a.car_wgt_3 BETWEEN drt.st_wgt_3 + c.cauDvSt AND drt.st_wgt_3 + c.cauDvEd then "주의"
			ELSE "혼잡" END 
		END AS c3
		,case 
		 when a.car_num <![CDATA[ >= ]]> 200 then
			case
			when a.car_wgt_4 BETWEEN c.rlxDvSt AND rgr.st_wgt_4 + c.rlxDvEd  then "여유"
			when a.car_wgt_4 BETWEEN rgr.st_wgt_4 + c.UsDvSt  AND rgr.st_wgt_4 + c.UsDvEd then "보통"
			when a.car_wgt_4 BETWEEN rgr.st_wgt_4 + c.cauDvSt AND rgr.st_wgt_4 + c.cauDvEd then "주의"
			ELSE "혼잡" END 
		ELSE 
			case
			when a.car_wgt_4 BETWEEN c.rlxDvSt AND drt.st_wgt_4 + c.rlxDvEd  then "여유"
			when a.car_wgt_4 BETWEEN drt.st_wgt_4 + c.UsDvSt  AND drt.st_wgt_4 + c.UsDvEd then "보통"
			when a.car_wgt_4 BETWEEN drt.st_wgt_4 + c.cauDvSt AND drt.st_wgt_4 + c.cauDvEd then "주의"
			ELSE "혼잡" END 
		END AS c4
		,case 
		 when a.car_num <![CDATA[ >= ]]> 200 then
			case
			when a.car_wgt_5 BETWEEN c.rlxDvSt AND rgr.st_wgt_5 + c.rlxDvEd  then "여유"
			when a.car_wgt_5 BETWEEN rgr.st_wgt_5 + c.UsDvSt  AND rgr.st_wgt_5 + c.UsDvEd then "보통"
			when a.car_wgt_5 BETWEEN rgr.st_wgt_5 + c.cauDvSt AND rgr.st_wgt_5 + c.cauDvEd then "주의"
			ELSE "혼잡" END 
		ELSE 
			case
			when a.car_wgt_5 BETWEEN c.rlxDvSt AND drt.st_wgt_5 + c.rlxDvEd  then "여유"
			when a.car_wgt_5 BETWEEN drt.st_wgt_5 + c.UsDvSt  AND drt.st_wgt_5 + c.UsDvEd then "보통"
			when a.car_wgt_5 BETWEEN drt.st_wgt_5 + c.cauDvSt AND drt.st_wgt_5 + c.cauDvEd then "주의"
		ELSE "혼잡" END 
		END AS c5
		,case 
		 when a.car_num <![CDATA[ >= ]]> 200 then
			case
			when a.car_wgt_6 BETWEEN c.rlxDvSt AND rgr.st_wgt_6 + c.rlxDvEd  then "여유"
			when a.car_wgt_6 BETWEEN rgr.st_wgt_6 + c.UsDvSt  AND rgr.st_wgt_6 + c.UsDvEd then "보통"
			when a.car_wgt_6 BETWEEN rgr.st_wgt_6 + c.cauDvSt AND rgr.st_wgt_6 + c.cauDvEd then "주의"
			ELSE "혼잡" END 
		ELSE 
			case
			when a.car_wgt_6 BETWEEN c.rlxDvSt AND drt.st_wgt_6 + c.rlxDvEd  then "여유"
			when a.car_wgt_6 BETWEEN drt.st_wgt_6 + c.UsDvSt  AND drt.st_wgt_6 + c.UsDvEd then "보통"
			when a.car_wgt_6 BETWEEN drt.st_wgt_6 + c.cauDvSt AND drt.st_wgt_6 + c.cauDvEd then "주의"
			ELSE "혼잡" END 
		END AS c6
		FROM
		(
			SELECT 
			snd_dt
			,car_num
			,car_wgt_1
			,car_wgt_2 
			,car_wgt_3 
			,car_wgt_4 	
			,car_wgt_5 	
			,car_wgt_6 	 	
			FROM tcms_log 
			WHERE car_num=#{cnum}
			AND snd_dt
			between 
			DATE_SUB(NOW(),INTERVAL 5 MINUTE) 
			AND NOW()
			ORDER BY snd_dt DESC 
			LIMIT 1
		)a, day_dv c,
		(SELECT * FROM ASP_INFO WHERE CAR_TYPE=1) AS DRT,
		(SELECT * FROM ASP_INFO WHERE CAR_TYPE=2) AS RGR 
	</select>
	
	<!-- 메인 3. 전/금일 주혼 누적그래프 비교-->
	<resultMap type="StkAreaVO" id="yesTodStkAr">
		<result property="hh"		column=	"HH"	/>
		<result property="yesC" 	column=	"YESC"	/>
		<result property="todC"		column=	"TODC"	/>
	</resultMap>
	<select id="yesTodStkAr" resultMap="yesTodStkAr">
		SELECT aa.hh, aa.alC as yesC, bb.alC as todC FROM 
			(
				SELECT HOUR(yesT.snd_dt) AS hh
				,COUNT(c1)+COUNT(c2)+COUNT(c3)+COUNT(c4)+COUNT(c5)+COUNT(c6) AS alC
				FROM 
				(
					SELECT a.snd_dt
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_1 <![CDATA[ >= ]]> rgr.st_wgt_1 + c.cauDvSt then 1 END ELSE case when a.car_wgt_1 <![CDATA[ >= ]]> drt.st_wgt_1 + c.cauDvSt  then 1 END END AS c1
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_2 <![CDATA[ >= ]]> rgr.st_wgt_2 + c.cauDvSt then 1 END ELSE case when a.car_wgt_2 <![CDATA[ >= ]]> drt.st_wgt_2 + c.cauDvSt  then 1 END END AS c2
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_3 <![CDATA[ >= ]]> rgr.st_wgt_3 + c.cauDvSt then 1 END ELSE case when a.car_wgt_3 <![CDATA[ >= ]]> drt.st_wgt_3 + c.cauDvSt  then 1 END END AS c3
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_4 <![CDATA[ >= ]]> rgr.st_wgt_4 + c.cauDvSt then 1 END ELSE case when a.car_wgt_4 <![CDATA[ >= ]]> drt.st_wgt_4 + c.cauDvSt  then 1 END END AS c4
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_5 <![CDATA[ >= ]]> rgr.st_wgt_5 + c.cauDvSt then 1 END ELSE case when a.car_wgt_5 <![CDATA[ >= ]]> drt.st_wgt_5 + c.cauDvSt  then 1 END END AS c5
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_6 <![CDATA[ >= ]]> rgr.st_wgt_6 + c.cauDvSt then 1 END ELSE case when a.car_wgt_6 <![CDATA[ >= ]]> drt.st_wgt_6 + c.cauDvSt  then 1 END END AS c6
					FROM
						(
							SELECT A.* FROM tcms_log A, day_term B
							WHERE 
							snd_dt  <![CDATA[ > ]]>  CONCAT(date(now())-interval 1 day," ","03:00:00")
							AND snd_dt  <![CDATA[ < ]]>  CONCAT(date(now())-interval 1 day," ",B.goworkSt)
						)A,day_dv C,
					(SELECT * FROM ASP_INFO WHERE CAR_TYPE=1) AS DRT,
					(SELECT * FROM ASP_INFO WHERE CAR_TYPE=2) AS RGR 
					
					UNION 
					
					SELECT a.snd_dt
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_1 <![CDATA[ >= ]]> rgr.st_wgt_1 + c.cauDvSt then 1 END ELSE case when a.car_wgt_1 <![CDATA[ >= ]]> drt.st_wgt_1 + c.cauDvSt  then 1 END END AS c1
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_2 <![CDATA[ >= ]]> rgr.st_wgt_2 + c.cauDvSt then 1 END ELSE case when a.car_wgt_2 <![CDATA[ >= ]]> drt.st_wgt_2 + c.cauDvSt  then 1 END END AS c2
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_3 <![CDATA[ >= ]]> rgr.st_wgt_3 + c.cauDvSt then 1 END ELSE case when a.car_wgt_3 <![CDATA[ >= ]]> drt.st_wgt_3 + c.cauDvSt  then 1 END END AS c3
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_4 <![CDATA[ >= ]]> rgr.st_wgt_4 + c.cauDvSt then 1 END ELSE case when a.car_wgt_4 <![CDATA[ >= ]]> drt.st_wgt_4 + c.cauDvSt  then 1 END END AS c4
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_5 <![CDATA[ >= ]]> rgr.st_wgt_5 + c.cauDvSt then 1 END ELSE case when a.car_wgt_5 <![CDATA[ >= ]]> drt.st_wgt_5 + c.cauDvSt  then 1 END END AS c5
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_6 <![CDATA[ >= ]]> rgr.st_wgt_6 + c.cauDvSt then 1 END ELSE case when a.car_wgt_6 <![CDATA[ >= ]]> drt.st_wgt_6 + c.cauDvSt  then 1 END END AS c6
				
					FROM
						(
							SELECT A.* FROM tcms_log A, day_term B
							WHERE 
							snd_dt  <![CDATA[ > ]]>  CONCAT(date(now())-interval 1 day," ",B.goworkSt)
							AND snd_dt  <![CDATA[ < ]]>  CONCAT(date(now())-interval 1 day," ",B.goworkEd)
						)A,gw_dv C,
					(SELECT * FROM ASP_INFO WHERE CAR_TYPE=1) AS DRT,
					(SELECT * FROM ASP_INFO WHERE CAR_TYPE=2) AS RGR 
				
					UNION 
					
					SELECT a.snd_dt
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_1 <![CDATA[ >= ]]> rgr.st_wgt_1 + c.cauDvSt then 1 END ELSE case when a.car_wgt_1 <![CDATA[ >= ]]> drt.st_wgt_1 + c.cauDvSt  then 1 END END AS c1
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_2 <![CDATA[ >= ]]> rgr.st_wgt_2 + c.cauDvSt then 1 END ELSE case when a.car_wgt_2 <![CDATA[ >= ]]> drt.st_wgt_2 + c.cauDvSt  then 1 END END AS c2
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_3 <![CDATA[ >= ]]> rgr.st_wgt_3 + c.cauDvSt then 1 END ELSE case when a.car_wgt_3 <![CDATA[ >= ]]> drt.st_wgt_3 + c.cauDvSt  then 1 END END AS c3
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_4 <![CDATA[ >= ]]> rgr.st_wgt_4 + c.cauDvSt then 1 END ELSE case when a.car_wgt_4 <![CDATA[ >= ]]> drt.st_wgt_4 + c.cauDvSt  then 1 END END AS c4
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_5 <![CDATA[ >= ]]> rgr.st_wgt_5 + c.cauDvSt then 1 END ELSE case when a.car_wgt_5 <![CDATA[ >= ]]> drt.st_wgt_5 + c.cauDvSt  then 1 END END AS c5
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_6 <![CDATA[ >= ]]> rgr.st_wgt_6 + c.cauDvSt then 1 END ELSE case when a.car_wgt_6 <![CDATA[ >= ]]> drt.st_wgt_6 + c.cauDvSt  then 1 END END AS c6
				
					FROM
						(
							SELECT A.* FROM tcms_log A, day_term B
							WHERE 
								snd_dt  <![CDATA[ > ]]>  CONCAT(date(now())-interval 1 day," ",B.daySt)
								AND snd_dt  <![CDATA[ < ]]>  CONCAT(date(now())-interval 1 day," ",B.dayEd)
						)A,day_dv C,
					(SELECT * FROM ASP_INFO WHERE CAR_TYPE=1) AS DRT,
					(SELECT * FROM ASP_INFO WHERE CAR_TYPE=2) AS RGR 
				
					UNION 
					
					SELECT a.snd_dt
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_1 <![CDATA[ >= ]]> rgr.st_wgt_1 + c.cauDvSt then 1 END ELSE case when a.car_wgt_1 <![CDATA[ >= ]]> drt.st_wgt_1 + c.cauDvSt  then 1 END END AS c1
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_2 <![CDATA[ >= ]]> rgr.st_wgt_2 + c.cauDvSt then 1 END ELSE case when a.car_wgt_2 <![CDATA[ >= ]]> drt.st_wgt_2 + c.cauDvSt  then 1 END END AS c2
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_3 <![CDATA[ >= ]]> rgr.st_wgt_3 + c.cauDvSt then 1 END ELSE case when a.car_wgt_3 <![CDATA[ >= ]]> drt.st_wgt_3 + c.cauDvSt  then 1 END END AS c3
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_4 <![CDATA[ >= ]]> rgr.st_wgt_4 + c.cauDvSt then 1 END ELSE case when a.car_wgt_4 <![CDATA[ >= ]]> drt.st_wgt_4 + c.cauDvSt  then 1 END END AS c4
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_5 <![CDATA[ >= ]]> rgr.st_wgt_5 + c.cauDvSt then 1 END ELSE case when a.car_wgt_5 <![CDATA[ >= ]]> drt.st_wgt_5 + c.cauDvSt  then 1 END END AS c5
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_6 <![CDATA[ >= ]]> rgr.st_wgt_6 + c.cauDvSt then 1 END ELSE case when a.car_wgt_6 <![CDATA[ >= ]]> drt.st_wgt_6 + c.cauDvSt  then 1 END END AS c6
				
					FROM
						(
							SELECT A.* FROM tcms_log A, day_term B
							WHERE 
								snd_dt  <![CDATA[ > ]]>  CONCAT(date(now())-interval 1 day," ",B.gohomeSt)
								AND snd_dt  <![CDATA[ < ]]>  CONCAT(date(now())-interval 1 day," ",B.gohomeEd)
						)A,gh_dv C,
					(SELECT * FROM ASP_INFO WHERE CAR_TYPE=1) AS DRT,
					(SELECT * FROM ASP_INFO WHERE CAR_TYPE=2) AS RGR 
				
					UNION 
					
					SELECT a.snd_dt
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_1 <![CDATA[ >= ]]> rgr.st_wgt_1 + c.cauDvSt then 1 END ELSE case when a.car_wgt_1 <![CDATA[ >= ]]> drt.st_wgt_1 + c.cauDvSt  then 1 END END AS c1
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_2 <![CDATA[ >= ]]> rgr.st_wgt_2 + c.cauDvSt then 1 END ELSE case when a.car_wgt_2 <![CDATA[ >= ]]> drt.st_wgt_2 + c.cauDvSt  then 1 END END AS c2
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_3 <![CDATA[ >= ]]> rgr.st_wgt_3 + c.cauDvSt then 1 END ELSE case when a.car_wgt_3 <![CDATA[ >= ]]> drt.st_wgt_3 + c.cauDvSt  then 1 END END AS c3
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_4 <![CDATA[ >= ]]> rgr.st_wgt_4 + c.cauDvSt then 1 END ELSE case when a.car_wgt_4 <![CDATA[ >= ]]> drt.st_wgt_4 + c.cauDvSt  then 1 END END AS c4
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_5 <![CDATA[ >= ]]> rgr.st_wgt_5 + c.cauDvSt then 1 END ELSE case when a.car_wgt_5 <![CDATA[ >= ]]> drt.st_wgt_5 + c.cauDvSt  then 1 END END AS c5
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_6 <![CDATA[ >= ]]> rgr.st_wgt_6 + c.cauDvSt then 1 END ELSE case when a.car_wgt_6 <![CDATA[ >= ]]> drt.st_wgt_6 + c.cauDvSt  then 1 END END AS c6
				
					FROM
						(
							SELECT A.* FROM tcms_log A, day_term B
							WHERE 
								snd_dt  <![CDATA[ > ]]>  CONCAT(date(now())-interval 1 day," ",b.nightSt)
								AND snd_dt  <![CDATA[ < ]]>  CONCAT(date(now())-interval 1 day," ","02:59:59") +INTERVAL 1 day
						)A,gh_dv C,
					(SELECT * FROM ASP_INFO WHERE CAR_TYPE=1) AS DRT,
					(SELECT * FROM ASP_INFO WHERE CAR_TYPE=2) AS RGR 
					ORDER BY snd_dt ASC 
				) yesT
				GROUP BY HOUR(yesT.snd_dt)
				ORDER BY yesT.snd_dt ASC 
			) aa
			
			LEFT OUTER JOIN
			
			(
				SELECT HOUR(todT.snd_dt) AS hh
				,COUNT(c1)+COUNT(c2)+COUNT(c3)+COUNT(c4)+COUNT(c5)+COUNT(c6) AS alC
				FROM 
				(
					SELECT a.snd_dt
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_1 <![CDATA[ >= ]]> rgr.st_wgt_1 + c.cauDvSt then 1 END ELSE case when a.car_wgt_1 <![CDATA[ >= ]]> drt.st_wgt_1 + c.cauDvSt  then 1 END END AS c1
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_2 <![CDATA[ >= ]]> rgr.st_wgt_2 + c.cauDvSt then 1 END ELSE case when a.car_wgt_2 <![CDATA[ >= ]]> drt.st_wgt_2 + c.cauDvSt  then 1 END END AS c2
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_3 <![CDATA[ >= ]]> rgr.st_wgt_3 + c.cauDvSt then 1 END ELSE case when a.car_wgt_3 <![CDATA[ >= ]]> drt.st_wgt_3 + c.cauDvSt  then 1 END END AS c3
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_4 <![CDATA[ >= ]]> rgr.st_wgt_4 + c.cauDvSt then 1 END ELSE case when a.car_wgt_4 <![CDATA[ >= ]]> drt.st_wgt_4 + c.cauDvSt  then 1 END END AS c4
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_5 <![CDATA[ >= ]]> rgr.st_wgt_5 + c.cauDvSt then 1 END ELSE case when a.car_wgt_5 <![CDATA[ >= ]]> drt.st_wgt_5 + c.cauDvSt  then 1 END END AS c5
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_6 <![CDATA[ >= ]]> rgr.st_wgt_6 + c.cauDvSt then 1 END ELSE case when a.car_wgt_6 <![CDATA[ >= ]]> drt.st_wgt_6 + c.cauDvSt  then 1 END END AS c6
					FROM
						(
							SELECT A.* FROM tcms_log A, day_term B
							WHERE 
							snd_dt  <![CDATA[ > ]]>  CONCAT(date(now())," ","03:00:00")
							AND snd_dt  <![CDATA[ < ]]>  CONCAT(date(now())," ",B.goworkSt)
						)A,day_dv C,
					(SELECT * FROM ASP_INFO WHERE CAR_TYPE=1) AS DRT,
					(SELECT * FROM ASP_INFO WHERE CAR_TYPE=2) AS RGR 
					
					UNION 
					
					SELECT a.snd_dt
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_1 <![CDATA[ >= ]]> rgr.st_wgt_1 + c.cauDvSt then 1 END ELSE case when a.car_wgt_1 <![CDATA[ >= ]]> drt.st_wgt_1 + c.cauDvSt  then 1 END END AS c1
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_2 <![CDATA[ >= ]]> rgr.st_wgt_2 + c.cauDvSt then 1 END ELSE case when a.car_wgt_2 <![CDATA[ >= ]]> drt.st_wgt_2 + c.cauDvSt  then 1 END END AS c2
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_3 <![CDATA[ >= ]]> rgr.st_wgt_3 + c.cauDvSt then 1 END ELSE case when a.car_wgt_3 <![CDATA[ >= ]]> drt.st_wgt_3 + c.cauDvSt  then 1 END END AS c3
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_4 <![CDATA[ >= ]]> rgr.st_wgt_4 + c.cauDvSt then 1 END ELSE case when a.car_wgt_4 <![CDATA[ >= ]]> drt.st_wgt_4 + c.cauDvSt  then 1 END END AS c4
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_5 <![CDATA[ >= ]]> rgr.st_wgt_5 + c.cauDvSt then 1 END ELSE case when a.car_wgt_5 <![CDATA[ >= ]]> drt.st_wgt_5 + c.cauDvSt  then 1 END END AS c5
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_6 <![CDATA[ >= ]]> rgr.st_wgt_6 + c.cauDvSt then 1 END ELSE case when a.car_wgt_6 <![CDATA[ >= ]]> drt.st_wgt_6 + c.cauDvSt  then 1 END END AS c6
				
					FROM
						(
							SELECT A.* FROM tcms_log A, day_term B
							WHERE 
							snd_dt  <![CDATA[ > ]]>  CONCAT(date(now())," ",B.goworkSt)
							AND snd_dt  <![CDATA[ < ]]>  CONCAT(date(now())," ",B.goworkEd)
						)A,gw_dv C,
					(SELECT * FROM ASP_INFO WHERE CAR_TYPE=1) AS DRT,
					(SELECT * FROM ASP_INFO WHERE CAR_TYPE=2) AS RGR 
				
					UNION 
					
					SELECT a.snd_dt
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_1 <![CDATA[ >= ]]> rgr.st_wgt_1 + c.cauDvSt then 1 END ELSE case when a.car_wgt_1 <![CDATA[ >= ]]> drt.st_wgt_1 + c.cauDvSt  then 1 END END AS c1
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_2 <![CDATA[ >= ]]> rgr.st_wgt_2 + c.cauDvSt then 1 END ELSE case when a.car_wgt_2 <![CDATA[ >= ]]> drt.st_wgt_2 + c.cauDvSt  then 1 END END AS c2
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_3 <![CDATA[ >= ]]> rgr.st_wgt_3 + c.cauDvSt then 1 END ELSE case when a.car_wgt_3 <![CDATA[ >= ]]> drt.st_wgt_3 + c.cauDvSt  then 1 END END AS c3
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_4 <![CDATA[ >= ]]> rgr.st_wgt_4 + c.cauDvSt then 1 END ELSE case when a.car_wgt_4 <![CDATA[ >= ]]> drt.st_wgt_4 + c.cauDvSt  then 1 END END AS c4
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_5 <![CDATA[ >= ]]> rgr.st_wgt_5 + c.cauDvSt then 1 END ELSE case when a.car_wgt_5 <![CDATA[ >= ]]> drt.st_wgt_5 + c.cauDvSt  then 1 END END AS c5
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_6 <![CDATA[ >= ]]> rgr.st_wgt_6 + c.cauDvSt then 1 END ELSE case when a.car_wgt_6 <![CDATA[ >= ]]> drt.st_wgt_6 + c.cauDvSt  then 1 END END AS c6
				
					FROM
						(
							SELECT A.* FROM tcms_log A, day_term B
							WHERE 
								snd_dt  <![CDATA[ > ]]>  CONCAT(date(now())," ",B.daySt)
								AND snd_dt  <![CDATA[ < ]]>  CONCAT(date(now())," ",B.dayEd)
						)A,day_dv C,
					(SELECT * FROM ASP_INFO WHERE CAR_TYPE=1) AS DRT,
					(SELECT * FROM ASP_INFO WHERE CAR_TYPE=2) AS RGR 
				
					UNION 
					
					SELECT a.snd_dt
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_1 <![CDATA[ >= ]]> rgr.st_wgt_1 + c.cauDvSt then 1 END ELSE case when a.car_wgt_1 <![CDATA[ >= ]]> drt.st_wgt_1 + c.cauDvSt  then 1 END END AS c1
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_2 <![CDATA[ >= ]]> rgr.st_wgt_2 + c.cauDvSt then 1 END ELSE case when a.car_wgt_2 <![CDATA[ >= ]]> drt.st_wgt_2 + c.cauDvSt  then 1 END END AS c2
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_3 <![CDATA[ >= ]]> rgr.st_wgt_3 + c.cauDvSt then 1 END ELSE case when a.car_wgt_3 <![CDATA[ >= ]]> drt.st_wgt_3 + c.cauDvSt  then 1 END END AS c3
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_4 <![CDATA[ >= ]]> rgr.st_wgt_4 + c.cauDvSt then 1 END ELSE case when a.car_wgt_4 <![CDATA[ >= ]]> drt.st_wgt_4 + c.cauDvSt  then 1 END END AS c4
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_5 <![CDATA[ >= ]]> rgr.st_wgt_5 + c.cauDvSt then 1 END ELSE case when a.car_wgt_5 <![CDATA[ >= ]]> drt.st_wgt_5 + c.cauDvSt  then 1 END END AS c5
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_6 <![CDATA[ >= ]]> rgr.st_wgt_6 + c.cauDvSt then 1 END ELSE case when a.car_wgt_6 <![CDATA[ >= ]]> drt.st_wgt_6 + c.cauDvSt  then 1 END END AS c6
				
					FROM
						(
							SELECT A.* FROM tcms_log A, day_term B
							WHERE 
								snd_dt  <![CDATA[ > ]]>  CONCAT(date(now())," ",B.gohomeSt)
								AND snd_dt  <![CDATA[ < ]]>  CONCAT(date(now())," ",B.gohomeEd)
						)A,gh_dv C,
					(SELECT * FROM ASP_INFO WHERE CAR_TYPE=1) AS DRT,
					(SELECT * FROM ASP_INFO WHERE CAR_TYPE=2) AS RGR 
				
					UNION 
					
					SELECT a.snd_dt
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_1 <![CDATA[ >= ]]> rgr.st_wgt_1 + c.cauDvSt then 1 END ELSE case when a.car_wgt_1 <![CDATA[ >= ]]> drt.st_wgt_1 + c.cauDvSt  then 1 END END AS c1
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_2 <![CDATA[ >= ]]> rgr.st_wgt_2 + c.cauDvSt then 1 END ELSE case when a.car_wgt_2 <![CDATA[ >= ]]> drt.st_wgt_2 + c.cauDvSt  then 1 END END AS c2
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_3 <![CDATA[ >= ]]> rgr.st_wgt_3 + c.cauDvSt then 1 END ELSE case when a.car_wgt_3 <![CDATA[ >= ]]> drt.st_wgt_3 + c.cauDvSt  then 1 END END AS c3
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_4 <![CDATA[ >= ]]> rgr.st_wgt_4 + c.cauDvSt then 1 END ELSE case when a.car_wgt_4 <![CDATA[ >= ]]> drt.st_wgt_4 + c.cauDvSt  then 1 END END AS c4
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_5 <![CDATA[ >= ]]> rgr.st_wgt_5 + c.cauDvSt then 1 END ELSE case when a.car_wgt_5 <![CDATA[ >= ]]> drt.st_wgt_5 + c.cauDvSt  then 1 END END AS c5
					,case when a.car_num<![CDATA[ >= ]]>200 then case when a.car_wgt_6 <![CDATA[ >= ]]> rgr.st_wgt_6 + c.cauDvSt then 1 END ELSE case when a.car_wgt_6 <![CDATA[ >= ]]> drt.st_wgt_6 + c.cauDvSt  then 1 END END AS c6
				
					FROM
						(
							SELECT A.* FROM tcms_log A, day_term B
							WHERE 
								snd_dt  <![CDATA[ > ]]>  CONCAT(date(now())," ",b.nightSt)
								AND snd_dt  <![CDATA[ < ]]>  CONCAT(date(now())," ","02:59:59") +INTERVAL 1 day
						)A,gh_dv C,
					(SELECT * FROM ASP_INFO WHERE CAR_TYPE=1) AS DRT,
					(SELECT * FROM ASP_INFO WHERE CAR_TYPE=2) AS RGR 
					ORDER BY snd_dt ASC 
				) todT
				WHERE 
				todT.snd_dt  <![CDATA[ > ]]>  CONCAT(date(now())," ","03:00:00")
				AND todT.snd_dt <![CDATA[ < ]]>  NOW()
				GROUP BY HOUR(todT.snd_dt)
				ORDER BY todT.snd_dt ASC 
			)bb	
			ON aa.hh=bb.hh
	    
	</select>
	
	<select id="bunmo" resultType="java.lang.Integer">
	    SELECT COUNT(*)*6 FROM day_crowd_cnt 
		WHERE snd_dt BETWEEN CONCAT(DATE(NOW())," ","03:00:00") AND NOW();
	</select>
</mapper>